//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Il codice sorgente è stato generato automaticamente da Microsoft.VSDesigner, versione 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace GestioneOrdini.LoginManager {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MicroareaLoginManagerSoap", Namespace="http://microarea.it/LoginManager/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(State))]
    public partial class MicroareaLoginManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsUserLoggedByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserLoggedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSecurityLightEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSecurityLightAccessAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBCultureLCIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMessageReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImmediateMessagesQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOldMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageFromQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurgeMessageByTagOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAccessMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAspNetUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationHashOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserCanAccessWebSitePrivateAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsEasyBuilderDeveloperOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendErrorFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadPdbOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMainSerialNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceJsonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMLUExpiryDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBalloonOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdvancedSendBalloonOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdvancedSendTaggedBalloonOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetChannelFreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChannelFreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback M4PKStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEditionTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokensByProcessNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginRegistrationTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginForTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginForOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyDBSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMobileTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshWMSSlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCalAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingNeededOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetClientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCompanyInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsActivatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSynchActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNonNTCompanyUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsESPLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsServiceAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasUserEBRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumAllCompanyUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumCompaniesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsIntegratedSecurityUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoggedUsersNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyLoggedUsersNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoggedUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoggedUsersAdvancedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalNumberByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalNumber2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalNumber3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalNumber4OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenProcessTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReloadConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReloadServerConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsumeMobileCalOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsumeInStoreCalOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsumeStockMoveCalOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginCompactOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginCompactOnlyCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback SSOLogOffOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginViaInfinityToken2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPATTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceUserPasswordExpirationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExistsSSOIDUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback Login2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogOffOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDescriptionByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDescriptionByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserEMailByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFloatingUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsWebUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsWinNTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDbOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCompanySecuredOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthenticationInformationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthenticationNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemDBConnectionStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDMSConnectionStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback Sql2012AllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDMSDatabasesInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSynchroDatabasesInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyDatabasesInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEditionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationStreamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProviderNameFromCompanyIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstallationVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TraceActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasUserAlreadyChangedPasswordTodayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrandedApplicationTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterProductBrandedNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterSolutionBrandedNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrandedProducerNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrandedProductTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrandedKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBNetworkTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDatabaseTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanUseNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CacheCounterOperationCompleted;
        
        private System.Threading.SendOrPostCallback CacheCounterGTGOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCurrentComponentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsVirginActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback HDOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoreMLUChoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveLicensedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateITokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLicensedOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrePingOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArticlesWithNamedCalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArticlesWithFloatingCalOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshFloatingMarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshSecurityStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProxySupportVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProxySettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetProxySettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidUpToDateTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReloadUserArticleBindingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FEUsedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SbrillOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MicroareaLoginManager() {
            this.Url = global::GestioneOrdini.Properties.Settings.Default.GestioneOrdini_LogicManager_MicroareaLoginManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsUserLoggedByNameCompletedEventHandler IsUserLoggedByNameCompleted;
        
        /// <remarks/>
        public event IsUserLoggedCompletedEventHandler IsUserLoggedCompleted;
        
        /// <remarks/>
        public event IsSecurityLightEnabledCompletedEventHandler IsSecurityLightEnabledCompleted;
        
        /// <remarks/>
        public event IsSecurityLightAccessAllowedCompletedEventHandler IsSecurityLightAccessAllowedCompleted;
        
        /// <remarks/>
        public event GetDBCultureLCIDCompletedEventHandler GetDBCultureLCIDCompleted;
        
        /// <remarks/>
        public event SetMessageReadCompletedEventHandler SetMessageReadCompleted;
        
        /// <remarks/>
        public event GetImmediateMessagesQueueCompletedEventHandler GetImmediateMessagesQueueCompleted;
        
        /// <remarks/>
        public event GetMessagesQueueCompletedEventHandler GetMessagesQueueCompleted;
        
        /// <remarks/>
        public event GetOldMessagesCompletedEventHandler GetOldMessagesCompleted;
        
        /// <remarks/>
        public event DeleteMessageFromQueueCompletedEventHandler DeleteMessageFromQueueCompleted;
        
        /// <remarks/>
        public event PurgeMessageByTagCompletedEventHandler PurgeMessageByTagCompleted;
        
        /// <remarks/>
        public event SendAccessMailCompletedEventHandler SendAccessMailCompleted;
        
        /// <remarks/>
        public event GetAspNetUserCompletedEventHandler GetAspNetUserCompleted;
        
        /// <remarks/>
        public event GetConfigurationHashCompletedEventHandler GetConfigurationHashCompleted;
        
        /// <remarks/>
        public event UserCanAccessWebSitePrivateAreaCompletedEventHandler UserCanAccessWebSitePrivateAreaCompleted;
        
        /// <remarks/>
        public event IsEasyBuilderDeveloperCompletedEventHandler IsEasyBuilderDeveloperCompleted;
        
        /// <remarks/>
        public event SendErrorFileCompletedEventHandler SendErrorFileCompleted;
        
        /// <remarks/>
        public event DownloadPdbCompletedEventHandler DownloadPdbCompleted;
        
        /// <remarks/>
        public event GetMainSerialNumberCompletedEventHandler GetMainSerialNumberCompleted;
        
        /// <remarks/>
        public event GetServiceJsonCompletedEventHandler GetServiceJsonCompleted;
        
        /// <remarks/>
        public event GetMLUExpiryDateCompletedEventHandler GetMLUExpiryDateCompleted;
        
        /// <remarks/>
        public event SendBalloonCompletedEventHandler SendBalloonCompleted;
        
        /// <remarks/>
        public event AdvancedSendBalloonCompletedEventHandler AdvancedSendBalloonCompleted;
        
        /// <remarks/>
        public event AdvancedSendTaggedBalloonCompletedEventHandler AdvancedSendTaggedBalloonCompleted;
        
        /// <remarks/>
        public event SetChannelFreeCompletedEventHandler SetChannelFreeCompleted;
        
        /// <remarks/>
        public event GetChannelFreeCompletedEventHandler GetChannelFreeCompleted;
        
        /// <remarks/>
        public event M4PKStatusCompletedEventHandler M4PKStatusCompleted;
        
        /// <remarks/>
        public event GetEditionTypeCompletedEventHandler GetEditionTypeCompleted;
        
        /// <remarks/>
        public event GetTokensByProcessNameCompletedEventHandler GetTokensByProcessNameCompleted;
        
        /// <remarks/>
        public event LoginRegistrationTestCompletedEventHandler LoginRegistrationTestCompleted;
        
        /// <remarks/>
        public event LoginRegistrationCompletedEventHandler LoginRegistrationCompleted;
        
        /// <remarks/>
        public event LoginForTestCompletedEventHandler LoginForTestCompleted;
        
        /// <remarks/>
        public event LoginForCompletedEventHandler LoginForCompleted;
        
        /// <remarks/>
        public event InitCompletedEventHandler InitCompleted;
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        public event VerifyDBSizeCompletedEventHandler VerifyDBSizeCompleted;
        
        /// <remarks/>
        public event GetMobileTokenCompletedEventHandler GetMobileTokenCompleted;
        
        /// <remarks/>
        public event RefreshWMSSlotCompletedEventHandler RefreshWMSSlotCompleted;
        
        /// <remarks/>
        public event IsCalAvailableCompletedEventHandler IsCalAvailableCompleted;
        
        /// <remarks/>
        public event IsValidDateCompletedEventHandler IsValidDateCompleted;
        
        /// <remarks/>
        public event PingNeededCompletedEventHandler PingNeededCompleted;
        
        /// <remarks/>
        public event SetClientDataCompletedEventHandler SetClientDataCompleted;
        
        /// <remarks/>
        public event SetCompanyInfoCompletedEventHandler SetCompanyInfoCompleted;
        
        /// <remarks/>
        public event IsActivatedCompletedEventHandler IsActivatedCompleted;
        
        /// <remarks/>
        public event IsSynchActivationCompletedEventHandler IsSynchActivationCompleted;
        
        /// <remarks/>
        public event GetModulesCompletedEventHandler GetModulesCompleted;
        
        /// <remarks/>
        public event GetCompanyUsersCompletedEventHandler GetCompanyUsersCompleted;
        
        /// <remarks/>
        public event GetNonNTCompanyUsersCompletedEventHandler GetNonNTCompanyUsersCompleted;
        
        /// <remarks/>
        public event GetCompanyRolesCompletedEventHandler GetCompanyRolesCompleted;
        
        /// <remarks/>
        public event IsESPLoginCompletedEventHandler IsESPLoginCompleted;
        
        /// <remarks/>
        public event IsServiceAccessCompletedEventHandler IsServiceAccessCompleted;
        
        /// <remarks/>
        public event HasUserEBRolesCompletedEventHandler HasUserEBRolesCompleted;
        
        /// <remarks/>
        public event GetUserRolesCompletedEventHandler GetUserRolesCompleted;
        
        /// <remarks/>
        public event EnumAllUsersCompletedEventHandler EnumAllUsersCompleted;
        
        /// <remarks/>
        public event EnumAllCompanyUsersCompletedEventHandler EnumAllCompanyUsersCompleted;
        
        /// <remarks/>
        public event GetRoleUsersCompletedEventHandler GetRoleUsersCompleted;
        
        /// <remarks/>
        public event EnumCompaniesCompletedEventHandler EnumCompaniesCompleted;
        
        /// <remarks/>
        public event IsIntegratedSecurityUserCompletedEventHandler IsIntegratedSecurityUserCompleted;
        
        /// <remarks/>
        public event GetLoggedUsersNumberCompletedEventHandler GetLoggedUsersNumberCompleted;
        
        /// <remarks/>
        public event GetCompanyLoggedUsersNumberCompletedEventHandler GetCompanyLoggedUsersNumberCompleted;
        
        /// <remarks/>
        public event GetLoggedUsersCompletedEventHandler GetLoggedUsersCompleted;
        
        /// <remarks/>
        public event GetLoggedUsersAdvancedCompletedEventHandler GetLoggedUsersAdvancedCompleted;
        
        /// <remarks/>
        public event GetCalNumberByTypeCompletedEventHandler GetCalNumberByTypeCompleted;
        
        /// <remarks/>
        public event GetCalNumberCompletedEventHandler GetCalNumberCompleted;
        
        /// <remarks/>
        public event GetCalNumber2CompletedEventHandler GetCalNumber2Completed;
        
        /// <remarks/>
        public event GetCalNumber3CompletedEventHandler GetCalNumber3Completed;
        
        /// <remarks/>
        public event GetCalNumber4CompletedEventHandler GetCalNumber4Completed;
        
        /// <remarks/>
        public event GetTokenProcessTypeCompletedEventHandler GetTokenProcessTypeCompleted;
        
        /// <remarks/>
        public event ReloadConfigurationCompletedEventHandler ReloadConfigurationCompleted;
        
        /// <remarks/>
        public event ReloadServerConnectionCompletedEventHandler ReloadServerConnectionCompleted;
        
        /// <remarks/>
        public event ValidateUserCompletedEventHandler ValidateUserCompleted;
        
        /// <remarks/>
        public event ConsumeMobileCalCompletedEventHandler ConsumeMobileCalCompleted;
        
        /// <remarks/>
        public event ConsumeInStoreCalCompletedEventHandler ConsumeInStoreCalCompleted;
        
        /// <remarks/>
        public event ConsumeStockMoveCalCompletedEventHandler ConsumeStockMoveCalCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event LoginCompactCompletedEventHandler LoginCompactCompleted;
        
        /// <remarks/>
        public event LoginCompactOnlyCheckCompletedEventHandler LoginCompactOnlyCheckCompleted;
        
        /// <remarks/>
        public event SSOLogOffCompletedEventHandler SSOLogOffCompleted;
        
        /// <remarks/>
        public event LoginViaInfinityToken2CompletedEventHandler LoginViaInfinityToken2Completed;
        
        /// <remarks/>
        public event GetITokenCompletedEventHandler GetITokenCompleted;
        
        /// <remarks/>
        public event GetPATTokenCompletedEventHandler GetPATTokenCompleted;
        
        /// <remarks/>
        public event GetServiceUserPasswordExpirationCompletedEventHandler GetServiceUserPasswordExpirationCompleted;
        
        /// <remarks/>
        public event ExistsSSOIDUserCompletedEventHandler ExistsSSOIDUserCompleted;
        
        /// <remarks/>
        public event LoginCheckCompletedEventHandler LoginCheckCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event Login2CompletedEventHandler Login2Completed;
        
        /// <remarks/>
        public event ConfirmTokenCompletedEventHandler ConfirmTokenCompleted;
        
        /// <remarks/>
        public event GetLoginInformationCompletedEventHandler GetLoginInformationCompleted;
        
        /// <remarks/>
        public event LogOffCompletedEventHandler LogOffCompleted;
        
        /// <remarks/>
        public event GetUserNameCompletedEventHandler GetUserNameCompleted;
        
        /// <remarks/>
        public event GetUserDescriptionByIdCompletedEventHandler GetUserDescriptionByIdCompleted;
        
        /// <remarks/>
        public event GetUserDescriptionByNameCompletedEventHandler GetUserDescriptionByNameCompleted;
        
        /// <remarks/>
        public event GetUserEMailByNameCompletedEventHandler GetUserEMailByNameCompleted;
        
        /// <remarks/>
        public event IsFloatingUserCompletedEventHandler IsFloatingUserCompleted;
        
        /// <remarks/>
        public event IsWebUserCompletedEventHandler IsWebUserCompleted;
        
        /// <remarks/>
        public event IsWinNTCompletedEventHandler IsWinNTCompleted;
        
        /// <remarks/>
        public event GetDbOwnerCompletedEventHandler GetDbOwnerCompleted;
        
        /// <remarks/>
        public event IsCompanySecuredCompletedEventHandler IsCompanySecuredCompleted;
        
        /// <remarks/>
        public event GetAuthenticationInformationsCompletedEventHandler GetAuthenticationInformationsCompleted;
        
        /// <remarks/>
        public event GetAuthenticationNamesCompletedEventHandler GetAuthenticationNamesCompleted;
        
        /// <remarks/>
        public event DeleteAssociationCompletedEventHandler DeleteAssociationCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event DeleteCompanyCompletedEventHandler DeleteCompanyCompleted;
        
        /// <remarks/>
        public event GetSystemDBConnectionStringCompletedEventHandler GetSystemDBConnectionStringCompleted;
        
        /// <remarks/>
        public event GetDMSConnectionStringCompletedEventHandler GetDMSConnectionStringCompleted;
        
        /// <remarks/>
        public event Sql2012AllowedCompletedEventHandler Sql2012AllowedCompleted;
        
        /// <remarks/>
        public event SetDefaultSchemaCompletedEventHandler SetDefaultSchemaCompleted;
        
        /// <remarks/>
        public event GetDMSDatabasesInfoCompletedEventHandler GetDMSDatabasesInfoCompleted;
        
        /// <remarks/>
        public event GetDataSynchroDatabasesInfoCompletedEventHandler GetDataSynchroDatabasesInfoCompleted;
        
        /// <remarks/>
        public event GetCompanyDatabasesInfoCompletedEventHandler GetCompanyDatabasesInfoCompleted;
        
        /// <remarks/>
        public event GetEditionCompletedEventHandler GetEditionCompleted;
        
        /// <remarks/>
        public event GetConfigurationStreamCompletedEventHandler GetConfigurationStreamCompleted;
        
        /// <remarks/>
        public event GetCountryCompletedEventHandler GetCountryCompleted;
        
        /// <remarks/>
        public event GetProviderNameFromCompanyIdCompletedEventHandler GetProviderNameFromCompanyIdCompleted;
        
        /// <remarks/>
        public event GetInstallationVersionCompletedEventHandler GetInstallationVersionCompleted;
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event GetUserInfoIDCompletedEventHandler GetUserInfoIDCompleted;
        
        /// <remarks/>
        public event TraceActionCompletedEventHandler TraceActionCompleted;
        
        /// <remarks/>
        public event HasUserAlreadyChangedPasswordTodayCompletedEventHandler HasUserAlreadyChangedPasswordTodayCompleted;
        
        /// <remarks/>
        public event GetBrandedApplicationTitleCompletedEventHandler GetBrandedApplicationTitleCompleted;
        
        /// <remarks/>
        public event GetMasterProductBrandedNameCompletedEventHandler GetMasterProductBrandedNameCompleted;
        
        /// <remarks/>
        public event GetMasterSolutionBrandedNameCompletedEventHandler GetMasterSolutionBrandedNameCompleted;
        
        /// <remarks/>
        public event GetMasterSolutionCompletedEventHandler GetMasterSolutionCompleted;
        
        /// <remarks/>
        public event GetBrandedProducerNameCompletedEventHandler GetBrandedProducerNameCompleted;
        
        /// <remarks/>
        public event GetBrandedProductTitleCompletedEventHandler GetBrandedProductTitleCompleted;
        
        /// <remarks/>
        public event GetBrandedKeyCompletedEventHandler GetBrandedKeyCompleted;
        
        /// <remarks/>
        public event GetDBNetworkTypeCompletedEventHandler GetDBNetworkTypeCompleted;
        
        /// <remarks/>
        public event GetDatabaseTypeCompletedEventHandler GetDatabaseTypeCompleted;
        
        /// <remarks/>
        public event CanUseNamespaceCompletedEventHandler CanUseNamespaceCompleted;
        
        /// <remarks/>
        public event CacheCounterCompletedEventHandler CacheCounterCompleted;
        
        /// <remarks/>
        public event CacheCounterGTGCompletedEventHandler CacheCounterGTGCompleted;
        
        /// <remarks/>
        public event SetCurrentComponentsCompletedEventHandler SetCurrentComponentsCompleted;
        
        /// <remarks/>
        public event IsVirginActivationCompletedEventHandler IsVirginActivationCompleted;
        
        /// <remarks/>
        public event HDCompletedEventHandler HDCompleted;
        
        /// <remarks/>
        public event StoreMLUChoiceCompletedEventHandler StoreMLUChoiceCompleted;
        
        /// <remarks/>
        public event SaveLicensedCompletedEventHandler SaveLicensedCompleted;
        
        /// <remarks/>
        public event ValidateITokenCompletedEventHandler ValidateITokenCompleted;
        
        /// <remarks/>
        public event SaveUserInfoCompletedEventHandler SaveUserInfoCompleted;
        
        /// <remarks/>
        public event DeleteUserInfoCompletedEventHandler DeleteUserInfoCompleted;
        
        /// <remarks/>
        public event DeleteLicensedCompletedEventHandler DeleteLicensedCompleted;
        
        /// <remarks/>
        public event PrePingCompletedEventHandler PrePingCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event GetArticlesWithNamedCalCompletedEventHandler GetArticlesWithNamedCalCompleted;
        
        /// <remarks/>
        public event GetArticlesWithFloatingCalCompletedEventHandler GetArticlesWithFloatingCalCompleted;
        
        /// <remarks/>
        public event RefreshFloatingMarkCompletedEventHandler RefreshFloatingMarkCompleted;
        
        /// <remarks/>
        public event RefreshSecurityStatusCompletedEventHandler RefreshSecurityStatusCompleted;
        
        /// <remarks/>
        public event GetProxySupportVersionCompletedEventHandler GetProxySupportVersionCompleted;
        
        /// <remarks/>
        public event GetProxySettingsCompletedEventHandler GetProxySettingsCompleted;
        
        /// <remarks/>
        public event SetProxySettingsCompletedEventHandler SetProxySettingsCompleted;
        
        /// <remarks/>
        public event GetUserLanguageCompletedEventHandler GetUserLanguageCompleted;
        
        /// <remarks/>
        public event GetCompanyLanguageCompletedEventHandler GetCompanyLanguageCompleted;
        
        /// <remarks/>
        public event IsValidUpToDateTokenCompletedEventHandler IsValidUpToDateTokenCompleted;
        
        /// <remarks/>
        public event IsValidTokenCompletedEventHandler IsValidTokenCompleted;
        
        /// <remarks/>
        public event ReloadUserArticleBindingsCompletedEventHandler ReloadUserArticleBindingsCompleted;
        
        /// <remarks/>
        public event FEUsedCompletedEventHandler FEUsedCompleted;
        
        /// <remarks/>
        public event SbrillCompletedEventHandler SbrillCompleted;
        
        /// <remarks/>
        public event GetCalTypeCompletedEventHandler GetCalTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsUserLoggedByName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserLoggedByName(string userName) {
            object[] results = this.Invoke("IsUserLoggedByName", new object[] {
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserLoggedByNameAsync(string userName) {
            this.IsUserLoggedByNameAsync(userName, null);
        }
        
        /// <remarks/>
        public void IsUserLoggedByNameAsync(string userName, object userState) {
            if ((this.IsUserLoggedByNameOperationCompleted == null)) {
                this.IsUserLoggedByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserLoggedByNameOperationCompleted);
            }
            this.InvokeAsync("IsUserLoggedByName", new object[] {
                        userName}, this.IsUserLoggedByNameOperationCompleted, userState);
        }
        
        private void OnIsUserLoggedByNameOperationCompleted(object arg) {
            if ((this.IsUserLoggedByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserLoggedByNameCompleted(this, new IsUserLoggedByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsUserLogged", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserLogged(int loginID) {
            object[] results = this.Invoke("IsUserLogged", new object[] {
                        loginID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserLoggedAsync(int loginID) {
            this.IsUserLoggedAsync(loginID, null);
        }
        
        /// <remarks/>
        public void IsUserLoggedAsync(int loginID, object userState) {
            if ((this.IsUserLoggedOperationCompleted == null)) {
                this.IsUserLoggedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserLoggedOperationCompleted);
            }
            this.InvokeAsync("IsUserLogged", new object[] {
                        loginID}, this.IsUserLoggedOperationCompleted, userState);
        }
        
        private void OnIsUserLoggedOperationCompleted(object arg) {
            if ((this.IsUserLoggedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserLoggedCompleted(this, new IsUserLoggedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsSecurityLightEnabled", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSecurityLightEnabled() {
            object[] results = this.Invoke("IsSecurityLightEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSecurityLightEnabledAsync() {
            this.IsSecurityLightEnabledAsync(null);
        }
        
        /// <remarks/>
        public void IsSecurityLightEnabledAsync(object userState) {
            if ((this.IsSecurityLightEnabledOperationCompleted == null)) {
                this.IsSecurityLightEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSecurityLightEnabledOperationCompleted);
            }
            this.InvokeAsync("IsSecurityLightEnabled", new object[0], this.IsSecurityLightEnabledOperationCompleted, userState);
        }
        
        private void OnIsSecurityLightEnabledOperationCompleted(object arg) {
            if ((this.IsSecurityLightEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSecurityLightEnabledCompleted(this, new IsSecurityLightEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsSecurityLightAccessAllowed", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSecurityLightAccessAllowed(string nameSpace, string authenticationToken, bool unattended) {
            object[] results = this.Invoke("IsSecurityLightAccessAllowed", new object[] {
                        nameSpace,
                        authenticationToken,
                        unattended});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSecurityLightAccessAllowedAsync(string nameSpace, string authenticationToken, bool unattended) {
            this.IsSecurityLightAccessAllowedAsync(nameSpace, authenticationToken, unattended, null);
        }
        
        /// <remarks/>
        public void IsSecurityLightAccessAllowedAsync(string nameSpace, string authenticationToken, bool unattended, object userState) {
            if ((this.IsSecurityLightAccessAllowedOperationCompleted == null)) {
                this.IsSecurityLightAccessAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSecurityLightAccessAllowedOperationCompleted);
            }
            this.InvokeAsync("IsSecurityLightAccessAllowed", new object[] {
                        nameSpace,
                        authenticationToken,
                        unattended}, this.IsSecurityLightAccessAllowedOperationCompleted, userState);
        }
        
        private void OnIsSecurityLightAccessAllowedOperationCompleted(object arg) {
            if ((this.IsSecurityLightAccessAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSecurityLightAccessAllowedCompleted(this, new IsSecurityLightAccessAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDBCultureLCID", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDBCultureLCID(int companyID) {
            object[] results = this.Invoke("GetDBCultureLCID", new object[] {
                        companyID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBCultureLCIDAsync(int companyID) {
            this.GetDBCultureLCIDAsync(companyID, null);
        }
        
        /// <remarks/>
        public void GetDBCultureLCIDAsync(int companyID, object userState) {
            if ((this.GetDBCultureLCIDOperationCompleted == null)) {
                this.GetDBCultureLCIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBCultureLCIDOperationCompleted);
            }
            this.InvokeAsync("GetDBCultureLCID", new object[] {
                        companyID}, this.GetDBCultureLCIDOperationCompleted, userState);
        }
        
        private void OnGetDBCultureLCIDOperationCompleted(object arg) {
            if ((this.GetDBCultureLCIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBCultureLCIDCompleted(this, new GetDBCultureLCIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SetMessageRead", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMessageRead(string userName, string messageID) {
            this.Invoke("SetMessageRead", new object[] {
                        userName,
                        messageID});
        }
        
        /// <remarks/>
        public void SetMessageReadAsync(string userName, string messageID) {
            this.SetMessageReadAsync(userName, messageID, null);
        }
        
        /// <remarks/>
        public void SetMessageReadAsync(string userName, string messageID, object userState) {
            if ((this.SetMessageReadOperationCompleted == null)) {
                this.SetMessageReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMessageReadOperationCompleted);
            }
            this.InvokeAsync("SetMessageRead", new object[] {
                        userName,
                        messageID}, this.SetMessageReadOperationCompleted, userState);
        }
        
        private void OnSetMessageReadOperationCompleted(object arg) {
            if ((this.SetMessageReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMessageReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetImmediateMessagesQueue", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Advertisement[] GetImmediateMessagesQueue(string authenticationToken) {
            object[] results = this.Invoke("GetImmediateMessagesQueue", new object[] {
                        authenticationToken});
            return ((Advertisement[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImmediateMessagesQueueAsync(string authenticationToken) {
            this.GetImmediateMessagesQueueAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetImmediateMessagesQueueAsync(string authenticationToken, object userState) {
            if ((this.GetImmediateMessagesQueueOperationCompleted == null)) {
                this.GetImmediateMessagesQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImmediateMessagesQueueOperationCompleted);
            }
            this.InvokeAsync("GetImmediateMessagesQueue", new object[] {
                        authenticationToken}, this.GetImmediateMessagesQueueOperationCompleted, userState);
        }
        
        private void OnGetImmediateMessagesQueueOperationCompleted(object arg) {
            if ((this.GetImmediateMessagesQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImmediateMessagesQueueCompleted(this, new GetImmediateMessagesQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetMessagesQueue", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Advertisement[] GetMessagesQueue(string authenticationToken) {
            object[] results = this.Invoke("GetMessagesQueue", new object[] {
                        authenticationToken});
            return ((Advertisement[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesQueueAsync(string authenticationToken) {
            this.GetMessagesQueueAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetMessagesQueueAsync(string authenticationToken, object userState) {
            if ((this.GetMessagesQueueOperationCompleted == null)) {
                this.GetMessagesQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesQueueOperationCompleted);
            }
            this.InvokeAsync("GetMessagesQueue", new object[] {
                        authenticationToken}, this.GetMessagesQueueOperationCompleted, userState);
        }
        
        private void OnGetMessagesQueueOperationCompleted(object arg) {
            if ((this.GetMessagesQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesQueueCompleted(this, new GetMessagesQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetOldMessages", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Advertisement[] GetOldMessages(string authenticationToken) {
            object[] results = this.Invoke("GetOldMessages", new object[] {
                        authenticationToken});
            return ((Advertisement[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOldMessagesAsync(string authenticationToken) {
            this.GetOldMessagesAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetOldMessagesAsync(string authenticationToken, object userState) {
            if ((this.GetOldMessagesOperationCompleted == null)) {
                this.GetOldMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOldMessagesOperationCompleted);
            }
            this.InvokeAsync("GetOldMessages", new object[] {
                        authenticationToken}, this.GetOldMessagesOperationCompleted, userState);
        }
        
        private void OnGetOldMessagesOperationCompleted(object arg) {
            if ((this.GetOldMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOldMessagesCompleted(this, new GetOldMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteMessageFromQueue", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMessageFromQueue(string messageID) {
            this.Invoke("DeleteMessageFromQueue", new object[] {
                        messageID});
        }
        
        /// <remarks/>
        public void DeleteMessageFromQueueAsync(string messageID) {
            this.DeleteMessageFromQueueAsync(messageID, null);
        }
        
        /// <remarks/>
        public void DeleteMessageFromQueueAsync(string messageID, object userState) {
            if ((this.DeleteMessageFromQueueOperationCompleted == null)) {
                this.DeleteMessageFromQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageFromQueueOperationCompleted);
            }
            this.InvokeAsync("DeleteMessageFromQueue", new object[] {
                        messageID}, this.DeleteMessageFromQueueOperationCompleted, userState);
        }
        
        private void OnDeleteMessageFromQueueOperationCompleted(object arg) {
            if ((this.DeleteMessageFromQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageFromQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/PurgeMessageByTag", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PurgeMessageByTag(string tag, string user) {
            this.Invoke("PurgeMessageByTag", new object[] {
                        tag,
                        user});
        }
        
        /// <remarks/>
        public void PurgeMessageByTagAsync(string tag, string user) {
            this.PurgeMessageByTagAsync(tag, user, null);
        }
        
        /// <remarks/>
        public void PurgeMessageByTagAsync(string tag, string user, object userState) {
            if ((this.PurgeMessageByTagOperationCompleted == null)) {
                this.PurgeMessageByTagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurgeMessageByTagOperationCompleted);
            }
            this.InvokeAsync("PurgeMessageByTag", new object[] {
                        tag,
                        user}, this.PurgeMessageByTagOperationCompleted, userState);
        }
        
        private void OnPurgeMessageByTagOperationCompleted(object arg) {
            if ((this.PurgeMessageByTagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurgeMessageByTagCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SendAccessMail", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendAccessMail() {
            object[] results = this.Invoke("SendAccessMail", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendAccessMailAsync() {
            this.SendAccessMailAsync(null);
        }
        
        /// <remarks/>
        public void SendAccessMailAsync(object userState) {
            if ((this.SendAccessMailOperationCompleted == null)) {
                this.SendAccessMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAccessMailOperationCompleted);
            }
            this.InvokeAsync("SendAccessMail", new object[0], this.SendAccessMailOperationCompleted, userState);
        }
        
        private void OnSendAccessMailOperationCompleted(object arg) {
            if ((this.SendAccessMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAccessMailCompleted(this, new SendAccessMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetAspNetUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAspNetUser() {
            object[] results = this.Invoke("GetAspNetUser", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAspNetUserAsync() {
            this.GetAspNetUserAsync(null);
        }
        
        /// <remarks/>
        public void GetAspNetUserAsync(object userState) {
            if ((this.GetAspNetUserOperationCompleted == null)) {
                this.GetAspNetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAspNetUserOperationCompleted);
            }
            this.InvokeAsync("GetAspNetUser", new object[0], this.GetAspNetUserOperationCompleted, userState);
        }
        
        private void OnGetAspNetUserOperationCompleted(object arg) {
            if ((this.GetAspNetUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAspNetUserCompleted(this, new GetAspNetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetConfigurationHash", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetConfigurationHash() {
            object[] results = this.Invoke("GetConfigurationHash", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigurationHashAsync() {
            this.GetConfigurationHashAsync(null);
        }
        
        /// <remarks/>
        public void GetConfigurationHashAsync(object userState) {
            if ((this.GetConfigurationHashOperationCompleted == null)) {
                this.GetConfigurationHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationHashOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationHash", new object[0], this.GetConfigurationHashOperationCompleted, userState);
        }
        
        private void OnGetConfigurationHashOperationCompleted(object arg) {
            if ((this.GetConfigurationHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationHashCompleted(this, new GetConfigurationHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/UserCanAccessWebSitePrivateArea", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserCanAccessWebSitePrivateArea(int loginId) {
            object[] results = this.Invoke("UserCanAccessWebSitePrivateArea", new object[] {
                        loginId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserCanAccessWebSitePrivateAreaAsync(int loginId) {
            this.UserCanAccessWebSitePrivateAreaAsync(loginId, null);
        }
        
        /// <remarks/>
        public void UserCanAccessWebSitePrivateAreaAsync(int loginId, object userState) {
            if ((this.UserCanAccessWebSitePrivateAreaOperationCompleted == null)) {
                this.UserCanAccessWebSitePrivateAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserCanAccessWebSitePrivateAreaOperationCompleted);
            }
            this.InvokeAsync("UserCanAccessWebSitePrivateArea", new object[] {
                        loginId}, this.UserCanAccessWebSitePrivateAreaOperationCompleted, userState);
        }
        
        private void OnUserCanAccessWebSitePrivateAreaOperationCompleted(object arg) {
            if ((this.UserCanAccessWebSitePrivateAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserCanAccessWebSitePrivateAreaCompleted(this, new UserCanAccessWebSitePrivateAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsEasyBuilderDeveloper", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsEasyBuilderDeveloper(string authenticationToken) {
            object[] results = this.Invoke("IsEasyBuilderDeveloper", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsEasyBuilderDeveloperAsync(string authenticationToken) {
            this.IsEasyBuilderDeveloperAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void IsEasyBuilderDeveloperAsync(string authenticationToken, object userState) {
            if ((this.IsEasyBuilderDeveloperOperationCompleted == null)) {
                this.IsEasyBuilderDeveloperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsEasyBuilderDeveloperOperationCompleted);
            }
            this.InvokeAsync("IsEasyBuilderDeveloper", new object[] {
                        authenticationToken}, this.IsEasyBuilderDeveloperOperationCompleted, userState);
        }
        
        private void OnIsEasyBuilderDeveloperOperationCompleted(object arg) {
            if ((this.IsEasyBuilderDeveloperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsEasyBuilderDeveloperCompleted(this, new IsEasyBuilderDeveloperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SendErrorFile", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendErrorFile(string LogFile, out string ErrorMessage) {
            object[] results = this.Invoke("SendErrorFile", new object[] {
                        LogFile});
            ErrorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendErrorFileAsync(string LogFile) {
            this.SendErrorFileAsync(LogFile, null);
        }
        
        /// <remarks/>
        public void SendErrorFileAsync(string LogFile, object userState) {
            if ((this.SendErrorFileOperationCompleted == null)) {
                this.SendErrorFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendErrorFileOperationCompleted);
            }
            this.InvokeAsync("SendErrorFile", new object[] {
                        LogFile}, this.SendErrorFileOperationCompleted, userState);
        }
        
        private void OnSendErrorFileOperationCompleted(object arg) {
            if ((this.SendErrorFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendErrorFileCompleted(this, new SendErrorFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DownloadPdb", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DownloadPdb(string PdbFile, out string ErrorMessage) {
            object[] results = this.Invoke("DownloadPdb", new object[] {
                        PdbFile});
            ErrorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadPdbAsync(string PdbFile) {
            this.DownloadPdbAsync(PdbFile, null);
        }
        
        /// <remarks/>
        public void DownloadPdbAsync(string PdbFile, object userState) {
            if ((this.DownloadPdbOperationCompleted == null)) {
                this.DownloadPdbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadPdbOperationCompleted);
            }
            this.InvokeAsync("DownloadPdb", new object[] {
                        PdbFile}, this.DownloadPdbOperationCompleted, userState);
        }
        
        private void OnDownloadPdbOperationCompleted(object arg) {
            if ((this.DownloadPdbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadPdbCompleted(this, new DownloadPdbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetMainSerialNumber", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMainSerialNumber() {
            object[] results = this.Invoke("GetMainSerialNumber", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMainSerialNumberAsync() {
            this.GetMainSerialNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetMainSerialNumberAsync(object userState) {
            if ((this.GetMainSerialNumberOperationCompleted == null)) {
                this.GetMainSerialNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMainSerialNumberOperationCompleted);
            }
            this.InvokeAsync("GetMainSerialNumber", new object[0], this.GetMainSerialNumberOperationCompleted, userState);
        }
        
        private void OnGetMainSerialNumberOperationCompleted(object arg) {
            if ((this.GetMainSerialNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMainSerialNumberCompleted(this, new GetMainSerialNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetServiceJson", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceJson() {
            object[] results = this.Invoke("GetServiceJson", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceJsonAsync() {
            this.GetServiceJsonAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceJsonAsync(object userState) {
            if ((this.GetServiceJsonOperationCompleted == null)) {
                this.GetServiceJsonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceJsonOperationCompleted);
            }
            this.InvokeAsync("GetServiceJson", new object[0], this.GetServiceJsonOperationCompleted, userState);
        }
        
        private void OnGetServiceJsonOperationCompleted(object arg) {
            if ((this.GetServiceJsonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceJsonCompleted(this, new GetServiceJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetMLUExpiryDate", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMLUExpiryDate() {
            object[] results = this.Invoke("GetMLUExpiryDate", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMLUExpiryDateAsync() {
            this.GetMLUExpiryDateAsync(null);
        }
        
        /// <remarks/>
        public void GetMLUExpiryDateAsync(object userState) {
            if ((this.GetMLUExpiryDateOperationCompleted == null)) {
                this.GetMLUExpiryDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMLUExpiryDateOperationCompleted);
            }
            this.InvokeAsync("GetMLUExpiryDate", new object[0], this.GetMLUExpiryDateOperationCompleted, userState);
        }
        
        private void OnGetMLUExpiryDateOperationCompleted(object arg) {
            if ((this.GetMLUExpiryDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMLUExpiryDateCompleted(this, new GetMLUExpiryDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SendBalloon", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendBalloon(string authenticationToken, string bodyMessage, MessageType messageType, string[] recipients) {
            this.Invoke("SendBalloon", new object[] {
                        authenticationToken,
                        bodyMessage,
                        messageType,
                        recipients});
        }
        
        /// <remarks/>
        public void SendBalloonAsync(string authenticationToken, string bodyMessage, MessageType messageType, string[] recipients) {
            this.SendBalloonAsync(authenticationToken, bodyMessage, messageType, recipients, null);
        }
        
        /// <remarks/>
        public void SendBalloonAsync(string authenticationToken, string bodyMessage, MessageType messageType, string[] recipients, object userState) {
            if ((this.SendBalloonOperationCompleted == null)) {
                this.SendBalloonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBalloonOperationCompleted);
            }
            this.InvokeAsync("SendBalloon", new object[] {
                        authenticationToken,
                        bodyMessage,
                        messageType,
                        recipients}, this.SendBalloonOperationCompleted, userState);
        }
        
        private void OnSendBalloonOperationCompleted(object arg) {
            if ((this.SendBalloonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBalloonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/AdvancedSendBalloon", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AdvancedSendBalloon(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer) {
            this.Invoke("AdvancedSendBalloon", new object[] {
                        authenticationToken,
                        bodyMessage,
                        expiryDate,
                        messageType,
                        recipients,
                        sensation,
                        historicize,
                        immediate,
                        timer});
        }
        
        /// <remarks/>
        public void AdvancedSendBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer) {
            this.AdvancedSendBalloonAsync(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer, null);
        }
        
        /// <remarks/>
        public void AdvancedSendBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, object userState) {
            if ((this.AdvancedSendBalloonOperationCompleted == null)) {
                this.AdvancedSendBalloonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvancedSendBalloonOperationCompleted);
            }
            this.InvokeAsync("AdvancedSendBalloon", new object[] {
                        authenticationToken,
                        bodyMessage,
                        expiryDate,
                        messageType,
                        recipients,
                        sensation,
                        historicize,
                        immediate,
                        timer}, this.AdvancedSendBalloonOperationCompleted, userState);
        }
        
        private void OnAdvancedSendBalloonOperationCompleted(object arg) {
            if ((this.AdvancedSendBalloonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvancedSendBalloonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/AdvancedSendTaggedBalloon", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AdvancedSendTaggedBalloon(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag) {
            this.Invoke("AdvancedSendTaggedBalloon", new object[] {
                        authenticationToken,
                        bodyMessage,
                        expiryDate,
                        messageType,
                        recipients,
                        sensation,
                        historicize,
                        immediate,
                        timer,
                        tag});
        }
        
        /// <remarks/>
        public void AdvancedSendTaggedBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag) {
            this.AdvancedSendTaggedBalloonAsync(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer, tag, null);
        }
        
        /// <remarks/>
        public void AdvancedSendTaggedBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag, object userState) {
            if ((this.AdvancedSendTaggedBalloonOperationCompleted == null)) {
                this.AdvancedSendTaggedBalloonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvancedSendTaggedBalloonOperationCompleted);
            }
            this.InvokeAsync("AdvancedSendTaggedBalloon", new object[] {
                        authenticationToken,
                        bodyMessage,
                        expiryDate,
                        messageType,
                        recipients,
                        sensation,
                        historicize,
                        immediate,
                        timer,
                        tag}, this.AdvancedSendTaggedBalloonOperationCompleted, userState);
        }
        
        private void OnAdvancedSendTaggedBalloonOperationCompleted(object arg) {
            if ((this.AdvancedSendTaggedBalloonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvancedSendTaggedBalloonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SetChannelFree", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetChannelFree(string authenticationToken, string[] channelCode) {
            object[] results = this.Invoke("SetChannelFree", new object[] {
                        authenticationToken,
                        channelCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetChannelFreeAsync(string authenticationToken, string[] channelCode) {
            this.SetChannelFreeAsync(authenticationToken, channelCode, null);
        }
        
        /// <remarks/>
        public void SetChannelFreeAsync(string authenticationToken, string[] channelCode, object userState) {
            if ((this.SetChannelFreeOperationCompleted == null)) {
                this.SetChannelFreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetChannelFreeOperationCompleted);
            }
            this.InvokeAsync("SetChannelFree", new object[] {
                        authenticationToken,
                        channelCode}, this.SetChannelFreeOperationCompleted, userState);
        }
        
        private void OnSetChannelFreeOperationCompleted(object arg) {
            if ((this.SetChannelFreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetChannelFreeCompleted(this, new SetChannelFreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetChannelFree", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetChannelFree() {
            object[] results = this.Invoke("GetChannelFree", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetChannelFreeAsync() {
            this.GetChannelFreeAsync(null);
        }
        
        /// <remarks/>
        public void GetChannelFreeAsync(object userState) {
            if ((this.GetChannelFreeOperationCompleted == null)) {
                this.GetChannelFreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChannelFreeOperationCompleted);
            }
            this.InvokeAsync("GetChannelFree", new object[0], this.GetChannelFreeOperationCompleted, userState);
        }
        
        private void OnGetChannelFreeOperationCompleted(object arg) {
            if ((this.GetChannelFreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChannelFreeCompleted(this, new GetChannelFreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/M4PKStatus", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int M4PKStatus(string id, string key) {
            object[] results = this.Invoke("M4PKStatus", new object[] {
                        id,
                        key});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void M4PKStatusAsync(string id, string key) {
            this.M4PKStatusAsync(id, key, null);
        }
        
        /// <remarks/>
        public void M4PKStatusAsync(string id, string key, object userState) {
            if ((this.M4PKStatusOperationCompleted == null)) {
                this.M4PKStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnM4PKStatusOperationCompleted);
            }
            this.InvokeAsync("M4PKStatus", new object[] {
                        id,
                        key}, this.M4PKStatusOperationCompleted, userState);
        }
        
        private void OnM4PKStatusOperationCompleted(object arg) {
            if ((this.M4PKStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.M4PKStatusCompleted(this, new M4PKStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetEditionType", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEditionType() {
            object[] results = this.Invoke("GetEditionType", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEditionTypeAsync() {
            this.GetEditionTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetEditionTypeAsync(object userState) {
            if ((this.GetEditionTypeOperationCompleted == null)) {
                this.GetEditionTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEditionTypeOperationCompleted);
            }
            this.InvokeAsync("GetEditionType", new object[0], this.GetEditionTypeOperationCompleted, userState);
        }
        
        private void OnGetEditionTypeOperationCompleted(object arg) {
            if ((this.GetEditionTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEditionTypeCompleted(this, new GetEditionTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetTokensByProcessName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetTokensByProcessName(string processName) {
            object[] results = this.Invoke("GetTokensByProcessName", new object[] {
                        processName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTokensByProcessNameAsync(string processName) {
            this.GetTokensByProcessNameAsync(processName, null);
        }
        
        /// <remarks/>
        public void GetTokensByProcessNameAsync(string processName, object userState) {
            if ((this.GetTokensByProcessNameOperationCompleted == null)) {
                this.GetTokensByProcessNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokensByProcessNameOperationCompleted);
            }
            this.InvokeAsync("GetTokensByProcessName", new object[] {
                        processName}, this.GetTokensByProcessNameOperationCompleted, userState);
        }
        
        private void OnGetTokensByProcessNameOperationCompleted(object arg) {
            if ((this.GetTokensByProcessNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokensByProcessNameCompleted(this, new GetTokensByProcessNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginRegistrationTest", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginRegistrationTest(string userName, string companyName, string password, string askingProcess) {
            object[] results = this.Invoke("LoginRegistrationTest", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginRegistrationTestAsync(string userName, string companyName, string password, string askingProcess) {
            this.LoginRegistrationTestAsync(userName, companyName, password, askingProcess, null);
        }
        
        /// <remarks/>
        public void LoginRegistrationTestAsync(string userName, string companyName, string password, string askingProcess, object userState) {
            if ((this.LoginRegistrationTestOperationCompleted == null)) {
                this.LoginRegistrationTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginRegistrationTestOperationCompleted);
            }
            this.InvokeAsync("LoginRegistrationTest", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess}, this.LoginRegistrationTestOperationCompleted, userState);
        }
        
        private void OnLoginRegistrationTestOperationCompleted(object arg) {
            if ((this.LoginRegistrationTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginRegistrationTestCompleted(this, new LoginRegistrationTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginRegistration", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginRegistration(ref string userName, ref string companyName, string password, string askingProcess, out string authenticationToken) {
            object[] results = this.Invoke("LoginRegistration", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess});
            userName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            authenticationToken = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginRegistrationAsync(string userName, string companyName, string password, string askingProcess) {
            this.LoginRegistrationAsync(userName, companyName, password, askingProcess, null);
        }
        
        /// <remarks/>
        public void LoginRegistrationAsync(string userName, string companyName, string password, string askingProcess, object userState) {
            if ((this.LoginRegistrationOperationCompleted == null)) {
                this.LoginRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginRegistrationOperationCompleted);
            }
            this.InvokeAsync("LoginRegistration", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess}, this.LoginRegistrationOperationCompleted, userState);
        }
        
        private void OnLoginRegistrationOperationCompleted(object arg) {
            if ((this.LoginRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginRegistrationCompleted(this, new LoginRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginForTest", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginForTest(string userName, string password, string companyName, string askingProcess, string askingUser, string token) {
            object[] results = this.Invoke("LoginForTest", new object[] {
                        userName,
                        password,
                        companyName,
                        askingProcess,
                        askingUser,
                        token});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginForTestAsync(string userName, string password, string companyName, string askingProcess, string askingUser, string token) {
            this.LoginForTestAsync(userName, password, companyName, askingProcess, askingUser, token, null);
        }
        
        /// <remarks/>
        public void LoginForTestAsync(string userName, string password, string companyName, string askingProcess, string askingUser, string token, object userState) {
            if ((this.LoginForTestOperationCompleted == null)) {
                this.LoginForTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginForTestOperationCompleted);
            }
            this.InvokeAsync("LoginForTest", new object[] {
                        userName,
                        password,
                        companyName,
                        askingProcess,
                        askingUser,
                        token}, this.LoginForTestOperationCompleted, userState);
        }
        
        private void OnLoginForTestOperationCompleted(object arg) {
            if ((this.LoginForTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginForTestCompleted(this, new LoginForTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginFor", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginFor(string userName, string password, string companyName, string askingProcess, string askingUser, string token, out string authenticationToken) {
            object[] results = this.Invoke("LoginFor", new object[] {
                        userName,
                        password,
                        companyName,
                        askingProcess,
                        askingUser,
                        token});
            authenticationToken = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginForAsync(string userName, string password, string companyName, string askingProcess, string askingUser, string token) {
            this.LoginForAsync(userName, password, companyName, askingProcess, askingUser, token, null);
        }
        
        /// <remarks/>
        public void LoginForAsync(string userName, string password, string companyName, string askingProcess, string askingUser, string token, object userState) {
            if ((this.LoginForOperationCompleted == null)) {
                this.LoginForOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginForOperationCompleted);
            }
            this.InvokeAsync("LoginFor", new object[] {
                        userName,
                        password,
                        companyName,
                        askingProcess,
                        askingUser,
                        token}, this.LoginForOperationCompleted, userState);
        }
        
        private void OnLoginForOperationCompleted(object arg) {
            if ((this.LoginForCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginForCompleted(this, new LoginForCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Init", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Init(bool reboot, string authenticationToken) {
            object[] results = this.Invoke("Init", new object[] {
                        reboot,
                        authenticationToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InitAsync(bool reboot, string authenticationToken) {
            this.InitAsync(reboot, authenticationToken, null);
        }
        
        /// <remarks/>
        public void InitAsync(bool reboot, string authenticationToken, object userState) {
            if ((this.InitOperationCompleted == null)) {
                this.InitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitOperationCompleted);
            }
            this.InvokeAsync("Init", new object[] {
                        reboot,
                        authenticationToken}, this.InitOperationCompleted, userState);
        }
        
        private void OnInitOperationCompleted(object arg) {
            if ((this.InitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitCompleted(this, new InitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsAlive", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[0], this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Test", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Test(string valore) {
            object[] results = this.Invoke("Test", new object[] {
                        valore});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestAsync(string valore) {
            this.TestAsync(valore, null);
        }
        
        /// <remarks/>
        public void TestAsync(string valore, object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[] {
                        valore}, this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/VerifyDBSize", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyDBSize() {
            object[] results = this.Invoke("VerifyDBSize", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyDBSizeAsync() {
            this.VerifyDBSizeAsync(null);
        }
        
        /// <remarks/>
        public void VerifyDBSizeAsync(object userState) {
            if ((this.VerifyDBSizeOperationCompleted == null)) {
                this.VerifyDBSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyDBSizeOperationCompleted);
            }
            this.InvokeAsync("VerifyDBSize", new object[0], this.VerifyDBSizeOperationCompleted, userState);
        }
        
        private void OnVerifyDBSizeOperationCompleted(object arg) {
            if ((this.VerifyDBSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyDBSizeCompleted(this, new VerifyDBSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetMobileToken", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMobileToken(string token, int loginType) {
            object[] results = this.Invoke("GetMobileToken", new object[] {
                        token,
                        loginType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMobileTokenAsync(string token, int loginType) {
            this.GetMobileTokenAsync(token, loginType, null);
        }
        
        /// <remarks/>
        public void GetMobileTokenAsync(string token, int loginType, object userState) {
            if ((this.GetMobileTokenOperationCompleted == null)) {
                this.GetMobileTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMobileTokenOperationCompleted);
            }
            this.InvokeAsync("GetMobileToken", new object[] {
                        token,
                        loginType}, this.GetMobileTokenOperationCompleted, userState);
        }
        
        private void OnGetMobileTokenOperationCompleted(object arg) {
            if ((this.GetMobileTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMobileTokenCompleted(this, new GetMobileTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/RefreshWMSSlot", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RefreshWMSSlot(string authenticationToken) {
            object[] results = this.Invoke("RefreshWMSSlot", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RefreshWMSSlotAsync(string authenticationToken) {
            this.RefreshWMSSlotAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void RefreshWMSSlotAsync(string authenticationToken, object userState) {
            if ((this.RefreshWMSSlotOperationCompleted == null)) {
                this.RefreshWMSSlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshWMSSlotOperationCompleted);
            }
            this.InvokeAsync("RefreshWMSSlot", new object[] {
                        authenticationToken}, this.RefreshWMSSlotOperationCompleted, userState);
        }
        
        private void OnRefreshWMSSlotOperationCompleted(object arg) {
            if ((this.RefreshWMSSlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshWMSSlotCompleted(this, new RefreshWMSSlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsCalAvailable", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCalAvailable(string authenticationToken, string application, string functionality) {
            object[] results = this.Invoke("IsCalAvailable", new object[] {
                        authenticationToken,
                        application,
                        functionality});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCalAvailableAsync(string authenticationToken, string application, string functionality) {
            this.IsCalAvailableAsync(authenticationToken, application, functionality, null);
        }
        
        /// <remarks/>
        public void IsCalAvailableAsync(string authenticationToken, string application, string functionality, object userState) {
            if ((this.IsCalAvailableOperationCompleted == null)) {
                this.IsCalAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCalAvailableOperationCompleted);
            }
            this.InvokeAsync("IsCalAvailable", new object[] {
                        authenticationToken,
                        application,
                        functionality}, this.IsCalAvailableOperationCompleted, userState);
        }
        
        private void OnIsCalAvailableOperationCompleted(object arg) {
            if ((this.IsCalAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCalAvailableCompleted(this, new IsCalAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsValidDate", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidDate(string operationDate, out string maxDate) {
            object[] results = this.Invoke("IsValidDate", new object[] {
                        operationDate});
            maxDate = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidDateAsync(string operationDate) {
            this.IsValidDateAsync(operationDate, null);
        }
        
        /// <remarks/>
        public void IsValidDateAsync(string operationDate, object userState) {
            if ((this.IsValidDateOperationCompleted == null)) {
                this.IsValidDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidDateOperationCompleted);
            }
            this.InvokeAsync("IsValidDate", new object[] {
                        operationDate}, this.IsValidDateOperationCompleted, userState);
        }
        
        private void OnIsValidDateOperationCompleted(object arg) {
            if ((this.IsValidDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidDateCompleted(this, new IsValidDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/PingNeeded", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PingNeeded(bool force) {
            object[] results = this.Invoke("PingNeeded", new object[] {
                        force});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PingNeededAsync(bool force) {
            this.PingNeededAsync(force, null);
        }
        
        /// <remarks/>
        public void PingNeededAsync(bool force, object userState) {
            if ((this.PingNeededOperationCompleted == null)) {
                this.PingNeededOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingNeededOperationCompleted);
            }
            this.InvokeAsync("PingNeeded", new object[] {
                        force}, this.PingNeededOperationCompleted, userState);
        }
        
        private void OnPingNeededOperationCompleted(object arg) {
            if ((this.PingNeededCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingNeededCompleted(this, new PingNeededCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SetClientData", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetClientData(ClientData cd) {
            this.Invoke("SetClientData", new object[] {
                        cd});
        }
        
        /// <remarks/>
        public void SetClientDataAsync(ClientData cd) {
            this.SetClientDataAsync(cd, null);
        }
        
        /// <remarks/>
        public void SetClientDataAsync(ClientData cd, object userState) {
            if ((this.SetClientDataOperationCompleted == null)) {
                this.SetClientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetClientDataOperationCompleted);
            }
            this.InvokeAsync("SetClientData", new object[] {
                        cd}, this.SetClientDataOperationCompleted, userState);
        }
        
        private void OnSetClientDataOperationCompleted(object arg) {
            if ((this.SetClientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetClientDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SetCompanyInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCompanyInfo(string authToken, string aName, string aValue) {
            object[] results = this.Invoke("SetCompanyInfo", new object[] {
                        authToken,
                        aName,
                        aValue});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCompanyInfoAsync(string authToken, string aName, string aValue) {
            this.SetCompanyInfoAsync(authToken, aName, aValue, null);
        }
        
        /// <remarks/>
        public void SetCompanyInfoAsync(string authToken, string aName, string aValue, object userState) {
            if ((this.SetCompanyInfoOperationCompleted == null)) {
                this.SetCompanyInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCompanyInfoOperationCompleted);
            }
            this.InvokeAsync("SetCompanyInfo", new object[] {
                        authToken,
                        aName,
                        aValue}, this.SetCompanyInfoOperationCompleted, userState);
        }
        
        private void OnSetCompanyInfoOperationCompleted(object arg) {
            if ((this.SetCompanyInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCompanyInfoCompleted(this, new SetCompanyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsActivated", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsActivated(string application, string functionality) {
            object[] results = this.Invoke("IsActivated", new object[] {
                        application,
                        functionality});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsActivatedAsync(string application, string functionality) {
            this.IsActivatedAsync(application, functionality, null);
        }
        
        /// <remarks/>
        public void IsActivatedAsync(string application, string functionality, object userState) {
            if ((this.IsActivatedOperationCompleted == null)) {
                this.IsActivatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsActivatedOperationCompleted);
            }
            this.InvokeAsync("IsActivated", new object[] {
                        application,
                        functionality}, this.IsActivatedOperationCompleted, userState);
        }
        
        private void OnIsActivatedOperationCompleted(object arg) {
            if ((this.IsActivatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsActivatedCompleted(this, new IsActivatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsSynchActivation", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSynchActivation() {
            object[] results = this.Invoke("IsSynchActivation", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSynchActivationAsync() {
            this.IsSynchActivationAsync(null);
        }
        
        /// <remarks/>
        public void IsSynchActivationAsync(object userState) {
            if ((this.IsSynchActivationOperationCompleted == null)) {
                this.IsSynchActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSynchActivationOperationCompleted);
            }
            this.InvokeAsync("IsSynchActivation", new object[0], this.IsSynchActivationOperationCompleted, userState);
        }
        
        private void OnIsSynchActivationOperationCompleted(object arg) {
            if ((this.IsSynchActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSynchActivationCompleted(this, new IsSynchActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetModules", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetModules() {
            object[] results = this.Invoke("GetModules", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetModulesAsync() {
            this.GetModulesAsync(null);
        }
        
        /// <remarks/>
        public void GetModulesAsync(object userState) {
            if ((this.GetModulesOperationCompleted == null)) {
                this.GetModulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModulesOperationCompleted);
            }
            this.InvokeAsync("GetModules", new object[0], this.GetModulesOperationCompleted, userState);
        }
        
        private void OnGetModulesOperationCompleted(object arg) {
            if ((this.GetModulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModulesCompleted(this, new GetModulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCompanyUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetCompanyUsers(string companyName) {
            object[] results = this.Invoke("GetCompanyUsers", new object[] {
                        companyName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyUsersAsync(string companyName) {
            this.GetCompanyUsersAsync(companyName, null);
        }
        
        /// <remarks/>
        public void GetCompanyUsersAsync(string companyName, object userState) {
            if ((this.GetCompanyUsersOperationCompleted == null)) {
                this.GetCompanyUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyUsersOperationCompleted);
            }
            this.InvokeAsync("GetCompanyUsers", new object[] {
                        companyName}, this.GetCompanyUsersOperationCompleted, userState);
        }
        
        private void OnGetCompanyUsersOperationCompleted(object arg) {
            if ((this.GetCompanyUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyUsersCompleted(this, new GetCompanyUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetNonNTCompanyUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetNonNTCompanyUsers(string companyName) {
            object[] results = this.Invoke("GetNonNTCompanyUsers", new object[] {
                        companyName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNonNTCompanyUsersAsync(string companyName) {
            this.GetNonNTCompanyUsersAsync(companyName, null);
        }
        
        /// <remarks/>
        public void GetNonNTCompanyUsersAsync(string companyName, object userState) {
            if ((this.GetNonNTCompanyUsersOperationCompleted == null)) {
                this.GetNonNTCompanyUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNonNTCompanyUsersOperationCompleted);
            }
            this.InvokeAsync("GetNonNTCompanyUsers", new object[] {
                        companyName}, this.GetNonNTCompanyUsersOperationCompleted, userState);
        }
        
        private void OnGetNonNTCompanyUsersOperationCompleted(object arg) {
            if ((this.GetNonNTCompanyUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNonNTCompanyUsersCompleted(this, new GetNonNTCompanyUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCompanyRoles", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetCompanyRoles(string companyName) {
            object[] results = this.Invoke("GetCompanyRoles", new object[] {
                        companyName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyRolesAsync(string companyName) {
            this.GetCompanyRolesAsync(companyName, null);
        }
        
        /// <remarks/>
        public void GetCompanyRolesAsync(string companyName, object userState) {
            if ((this.GetCompanyRolesOperationCompleted == null)) {
                this.GetCompanyRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyRolesOperationCompleted);
            }
            this.InvokeAsync("GetCompanyRoles", new object[] {
                        companyName}, this.GetCompanyRolesOperationCompleted, userState);
        }
        
        private void OnGetCompanyRolesOperationCompleted(object arg) {
            if ((this.GetCompanyRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyRolesCompleted(this, new GetCompanyRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsESPLogin", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsESPLogin(string authenticationToken) {
            object[] results = this.Invoke("IsESPLogin", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsESPLoginAsync(string authenticationToken) {
            this.IsESPLoginAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void IsESPLoginAsync(string authenticationToken, object userState) {
            if ((this.IsESPLoginOperationCompleted == null)) {
                this.IsESPLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsESPLoginOperationCompleted);
            }
            this.InvokeAsync("IsESPLogin", new object[] {
                        authenticationToken}, this.IsESPLoginOperationCompleted, userState);
        }
        
        private void OnIsESPLoginOperationCompleted(object arg) {
            if ((this.IsESPLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsESPLoginCompleted(this, new IsESPLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsServiceAccess", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsServiceAccess(string authenticationToken) {
            object[] results = this.Invoke("IsServiceAccess", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsServiceAccessAsync(string authenticationToken) {
            this.IsServiceAccessAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void IsServiceAccessAsync(string authenticationToken, object userState) {
            if ((this.IsServiceAccessOperationCompleted == null)) {
                this.IsServiceAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsServiceAccessOperationCompleted);
            }
            this.InvokeAsync("IsServiceAccess", new object[] {
                        authenticationToken}, this.IsServiceAccessOperationCompleted, userState);
        }
        
        private void OnIsServiceAccessOperationCompleted(object arg) {
            if ((this.IsServiceAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsServiceAccessCompleted(this, new IsServiceAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/HasUserEBRoles", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasUserEBRoles(int companyName, int userName) {
            object[] results = this.Invoke("HasUserEBRoles", new object[] {
                        companyName,
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasUserEBRolesAsync(int companyName, int userName) {
            this.HasUserEBRolesAsync(companyName, userName, null);
        }
        
        /// <remarks/>
        public void HasUserEBRolesAsync(int companyName, int userName, object userState) {
            if ((this.HasUserEBRolesOperationCompleted == null)) {
                this.HasUserEBRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasUserEBRolesOperationCompleted);
            }
            this.InvokeAsync("HasUserEBRoles", new object[] {
                        companyName,
                        userName}, this.HasUserEBRolesOperationCompleted, userState);
        }
        
        private void OnHasUserEBRolesOperationCompleted(object arg) {
            if ((this.HasUserEBRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasUserEBRolesCompleted(this, new HasUserEBRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserRoles", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUserRoles(string companyName, string userName) {
            object[] results = this.Invoke("GetUserRoles", new object[] {
                        companyName,
                        userName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserRolesAsync(string companyName, string userName) {
            this.GetUserRolesAsync(companyName, userName, null);
        }
        
        /// <remarks/>
        public void GetUserRolesAsync(string companyName, string userName, object userState) {
            if ((this.GetUserRolesOperationCompleted == null)) {
                this.GetUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserRolesOperationCompleted);
            }
            this.InvokeAsync("GetUserRoles", new object[] {
                        companyName,
                        userName}, this.GetUserRolesOperationCompleted, userState);
        }
        
        private void OnGetUserRolesOperationCompleted(object arg) {
            if ((this.GetUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserRolesCompleted(this, new GetUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/EnumAllUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumAllUsers() {
            object[] results = this.Invoke("EnumAllUsers", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void EnumAllUsersAsync() {
            this.EnumAllUsersAsync(null);
        }
        
        /// <remarks/>
        public void EnumAllUsersAsync(object userState) {
            if ((this.EnumAllUsersOperationCompleted == null)) {
                this.EnumAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumAllUsersOperationCompleted);
            }
            this.InvokeAsync("EnumAllUsers", new object[0], this.EnumAllUsersOperationCompleted, userState);
        }
        
        private void OnEnumAllUsersOperationCompleted(object arg) {
            if ((this.EnumAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumAllUsersCompleted(this, new EnumAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/EnumAllCompanyUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumAllCompanyUsers(int companyId, bool onlyNonNTUsers) {
            object[] results = this.Invoke("EnumAllCompanyUsers", new object[] {
                        companyId,
                        onlyNonNTUsers});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void EnumAllCompanyUsersAsync(int companyId, bool onlyNonNTUsers) {
            this.EnumAllCompanyUsersAsync(companyId, onlyNonNTUsers, null);
        }
        
        /// <remarks/>
        public void EnumAllCompanyUsersAsync(int companyId, bool onlyNonNTUsers, object userState) {
            if ((this.EnumAllCompanyUsersOperationCompleted == null)) {
                this.EnumAllCompanyUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumAllCompanyUsersOperationCompleted);
            }
            this.InvokeAsync("EnumAllCompanyUsers", new object[] {
                        companyId,
                        onlyNonNTUsers}, this.EnumAllCompanyUsersOperationCompleted, userState);
        }
        
        private void OnEnumAllCompanyUsersOperationCompleted(object arg) {
            if ((this.EnumAllCompanyUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumAllCompanyUsersCompleted(this, new EnumAllCompanyUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetRoleUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRoleUsers(string companyName, string roleName) {
            object[] results = this.Invoke("GetRoleUsers", new object[] {
                        companyName,
                        roleName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleUsersAsync(string companyName, string roleName) {
            this.GetRoleUsersAsync(companyName, roleName, null);
        }
        
        /// <remarks/>
        public void GetRoleUsersAsync(string companyName, string roleName, object userState) {
            if ((this.GetRoleUsersOperationCompleted == null)) {
                this.GetRoleUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleUsersOperationCompleted);
            }
            this.InvokeAsync("GetRoleUsers", new object[] {
                        companyName,
                        roleName}, this.GetRoleUsersOperationCompleted, userState);
        }
        
        private void OnGetRoleUsersOperationCompleted(object arg) {
            if ((this.GetRoleUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleUsersCompleted(this, new GetRoleUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/EnumCompanies", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EnumCompanies(string userName) {
            object[] results = this.Invoke("EnumCompanies", new object[] {
                        userName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void EnumCompaniesAsync(string userName) {
            this.EnumCompaniesAsync(userName, null);
        }
        
        /// <remarks/>
        public void EnumCompaniesAsync(string userName, object userState) {
            if ((this.EnumCompaniesOperationCompleted == null)) {
                this.EnumCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumCompaniesOperationCompleted);
            }
            this.InvokeAsync("EnumCompanies", new object[] {
                        userName}, this.EnumCompaniesOperationCompleted, userState);
        }
        
        private void OnEnumCompaniesOperationCompleted(object arg) {
            if ((this.EnumCompaniesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumCompaniesCompleted(this, new EnumCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsIntegratedSecurityUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsIntegratedSecurityUser(string userName) {
            object[] results = this.Invoke("IsIntegratedSecurityUser", new object[] {
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsIntegratedSecurityUserAsync(string userName) {
            this.IsIntegratedSecurityUserAsync(userName, null);
        }
        
        /// <remarks/>
        public void IsIntegratedSecurityUserAsync(string userName, object userState) {
            if ((this.IsIntegratedSecurityUserOperationCompleted == null)) {
                this.IsIntegratedSecurityUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsIntegratedSecurityUserOperationCompleted);
            }
            this.InvokeAsync("IsIntegratedSecurityUser", new object[] {
                        userName}, this.IsIntegratedSecurityUserOperationCompleted, userState);
        }
        
        private void OnIsIntegratedSecurityUserOperationCompleted(object arg) {
            if ((this.IsIntegratedSecurityUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsIntegratedSecurityUserCompleted(this, new IsIntegratedSecurityUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoggedUsersNumber", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetLoggedUsersNumber() {
            object[] results = this.Invoke("GetLoggedUsersNumber", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoggedUsersNumberAsync() {
            this.GetLoggedUsersNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetLoggedUsersNumberAsync(object userState) {
            if ((this.GetLoggedUsersNumberOperationCompleted == null)) {
                this.GetLoggedUsersNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoggedUsersNumberOperationCompleted);
            }
            this.InvokeAsync("GetLoggedUsersNumber", new object[0], this.GetLoggedUsersNumberOperationCompleted, userState);
        }
        
        private void OnGetLoggedUsersNumberOperationCompleted(object arg) {
            if ((this.GetLoggedUsersNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoggedUsersNumberCompleted(this, new GetLoggedUsersNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCompanyLoggedUsersNumber", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCompanyLoggedUsersNumber(int companyId) {
            object[] results = this.Invoke("GetCompanyLoggedUsersNumber", new object[] {
                        companyId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyLoggedUsersNumberAsync(int companyId) {
            this.GetCompanyLoggedUsersNumberAsync(companyId, null);
        }
        
        /// <remarks/>
        public void GetCompanyLoggedUsersNumberAsync(int companyId, object userState) {
            if ((this.GetCompanyLoggedUsersNumberOperationCompleted == null)) {
                this.GetCompanyLoggedUsersNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyLoggedUsersNumberOperationCompleted);
            }
            this.InvokeAsync("GetCompanyLoggedUsersNumber", new object[] {
                        companyId}, this.GetCompanyLoggedUsersNumberOperationCompleted, userState);
        }
        
        private void OnGetCompanyLoggedUsersNumberOperationCompleted(object arg) {
            if ((this.GetCompanyLoggedUsersNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyLoggedUsersNumberCompleted(this, new GetCompanyLoggedUsersNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoggedUsers", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLoggedUsers() {
            object[] results = this.Invoke("GetLoggedUsers", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoggedUsersAsync() {
            this.GetLoggedUsersAsync(null);
        }
        
        /// <remarks/>
        public void GetLoggedUsersAsync(object userState) {
            if ((this.GetLoggedUsersOperationCompleted == null)) {
                this.GetLoggedUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoggedUsersOperationCompleted);
            }
            this.InvokeAsync("GetLoggedUsers", new object[0], this.GetLoggedUsersOperationCompleted, userState);
        }
        
        private void OnGetLoggedUsersOperationCompleted(object arg) {
            if ((this.GetLoggedUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoggedUsersCompleted(this, new GetLoggedUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoggedUsersAdvanced", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLoggedUsersAdvanced(string token) {
            object[] results = this.Invoke("GetLoggedUsersAdvanced", new object[] {
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoggedUsersAdvancedAsync(string token) {
            this.GetLoggedUsersAdvancedAsync(token, null);
        }
        
        /// <remarks/>
        public void GetLoggedUsersAdvancedAsync(string token, object userState) {
            if ((this.GetLoggedUsersAdvancedOperationCompleted == null)) {
                this.GetLoggedUsersAdvancedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoggedUsersAdvancedOperationCompleted);
            }
            this.InvokeAsync("GetLoggedUsersAdvanced", new object[] {
                        token}, this.GetLoggedUsersAdvancedOperationCompleted, userState);
        }
        
        private void OnGetLoggedUsersAdvancedOperationCompleted(object arg) {
            if ((this.GetLoggedUsersAdvancedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoggedUsersAdvancedCompleted(this, new GetLoggedUsersAdvancedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCalNumberByType", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCalNumberByType(string token, string caltypevalue) {
            object[] results = this.Invoke("GetCalNumberByType", new object[] {
                        token,
                        caltypevalue});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalNumberByTypeAsync(string token, string caltypevalue) {
            this.GetCalNumberByTypeAsync(token, caltypevalue, null);
        }
        
        /// <remarks/>
        public void GetCalNumberByTypeAsync(string token, string caltypevalue, object userState) {
            if ((this.GetCalNumberByTypeOperationCompleted == null)) {
                this.GetCalNumberByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalNumberByTypeOperationCompleted);
            }
            this.InvokeAsync("GetCalNumberByType", new object[] {
                        token,
                        caltypevalue}, this.GetCalNumberByTypeOperationCompleted, userState);
        }
        
        private void OnGetCalNumberByTypeOperationCompleted(object arg) {
            if ((this.GetCalNumberByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalNumberByTypeCompleted(this, new GetCalNumberByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCalNumber", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("namedCal")]
        public int GetCalNumber(out int gdiConcurrent, out int unnamedCal, out int officeCal, out int tpCal) {
            object[] results = this.Invoke("GetCalNumber", new object[0]);
            gdiConcurrent = ((int)(results[1]));
            unnamedCal = ((int)(results[2]));
            officeCal = ((int)(results[3]));
            tpCal = ((int)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalNumberAsync() {
            this.GetCalNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetCalNumberAsync(object userState) {
            if ((this.GetCalNumberOperationCompleted == null)) {
                this.GetCalNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalNumberOperationCompleted);
            }
            this.InvokeAsync("GetCalNumber", new object[0], this.GetCalNumberOperationCompleted, userState);
        }
        
        private void OnGetCalNumberOperationCompleted(object arg) {
            if ((this.GetCalNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalNumberCompleted(this, new GetCalNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCalNumber2", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("namedCal")]
        public int GetCalNumber2(out int gdiConcurrent, out int unnamedCal, out int officeCal, out int tpCal, out int wmsCal, out int manufacturingCal) {
            object[] results = this.Invoke("GetCalNumber2", new object[0]);
            gdiConcurrent = ((int)(results[1]));
            unnamedCal = ((int)(results[2]));
            officeCal = ((int)(results[3]));
            tpCal = ((int)(results[4]));
            wmsCal = ((int)(results[5]));
            manufacturingCal = ((int)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalNumber2Async() {
            this.GetCalNumber2Async(null);
        }
        
        /// <remarks/>
        public void GetCalNumber2Async(object userState) {
            if ((this.GetCalNumber2OperationCompleted == null)) {
                this.GetCalNumber2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalNumber2OperationCompleted);
            }
            this.InvokeAsync("GetCalNumber2", new object[0], this.GetCalNumber2OperationCompleted, userState);
        }
        
        private void OnGetCalNumber2OperationCompleted(object arg) {
            if ((this.GetCalNumber2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalNumber2Completed(this, new GetCalNumber2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCalNumber3", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("namedCal")]
        public int GetCalNumber3(out int gdiConcurrent, out int unnamedCal, out int officeCal, out int tpCal, out int wmsCal, out int manufacturingCal, out int instoreCal) {
            object[] results = this.Invoke("GetCalNumber3", new object[0]);
            gdiConcurrent = ((int)(results[1]));
            unnamedCal = ((int)(results[2]));
            officeCal = ((int)(results[3]));
            tpCal = ((int)(results[4]));
            wmsCal = ((int)(results[5]));
            manufacturingCal = ((int)(results[6]));
            instoreCal = ((int)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalNumber3Async() {
            this.GetCalNumber3Async(null);
        }
        
        /// <remarks/>
        public void GetCalNumber3Async(object userState) {
            if ((this.GetCalNumber3OperationCompleted == null)) {
                this.GetCalNumber3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalNumber3OperationCompleted);
            }
            this.InvokeAsync("GetCalNumber3", new object[0], this.GetCalNumber3OperationCompleted, userState);
        }
        
        private void OnGetCalNumber3OperationCompleted(object arg) {
            if ((this.GetCalNumber3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalNumber3Completed(this, new GetCalNumber3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCalNumber4", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("namedCal")]
        public int GetCalNumber4(out int gdiConcurrent, out int unnamedCal, out int officeCal, out int tpCal, out int wmsCal, out int manufacturingCal, out int instoreCal, out int stockmoveCal) {
            object[] results = this.Invoke("GetCalNumber4", new object[0]);
            gdiConcurrent = ((int)(results[1]));
            unnamedCal = ((int)(results[2]));
            officeCal = ((int)(results[3]));
            tpCal = ((int)(results[4]));
            wmsCal = ((int)(results[5]));
            manufacturingCal = ((int)(results[6]));
            instoreCal = ((int)(results[7]));
            stockmoveCal = ((int)(results[8]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalNumber4Async() {
            this.GetCalNumber4Async(null);
        }
        
        /// <remarks/>
        public void GetCalNumber4Async(object userState) {
            if ((this.GetCalNumber4OperationCompleted == null)) {
                this.GetCalNumber4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalNumber4OperationCompleted);
            }
            this.InvokeAsync("GetCalNumber4", new object[0], this.GetCalNumber4OperationCompleted, userState);
        }
        
        private void OnGetCalNumber4OperationCompleted(object arg) {
            if ((this.GetCalNumber4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalNumber4Completed(this, new GetCalNumber4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetTokenProcessType", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTokenProcessType(string token) {
            object[] results = this.Invoke("GetTokenProcessType", new object[] {
                        token});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTokenProcessTypeAsync(string token) {
            this.GetTokenProcessTypeAsync(token, null);
        }
        
        /// <remarks/>
        public void GetTokenProcessTypeAsync(string token, object userState) {
            if ((this.GetTokenProcessTypeOperationCompleted == null)) {
                this.GetTokenProcessTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenProcessTypeOperationCompleted);
            }
            this.InvokeAsync("GetTokenProcessType", new object[] {
                        token}, this.GetTokenProcessTypeOperationCompleted, userState);
        }
        
        private void OnGetTokenProcessTypeOperationCompleted(object arg) {
            if ((this.GetTokenProcessTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenProcessTypeCompleted(this, new GetTokenProcessTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ReloadConfiguration", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReloadConfiguration() {
            this.Invoke("ReloadConfiguration", new object[0]);
        }
        
        /// <remarks/>
        public void ReloadConfigurationAsync() {
            this.ReloadConfigurationAsync(null);
        }
        
        /// <remarks/>
        public void ReloadConfigurationAsync(object userState) {
            if ((this.ReloadConfigurationOperationCompleted == null)) {
                this.ReloadConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReloadConfigurationOperationCompleted);
            }
            this.InvokeAsync("ReloadConfiguration", new object[0], this.ReloadConfigurationOperationCompleted, userState);
        }
        
        private void OnReloadConfigurationOperationCompleted(object arg) {
            if ((this.ReloadConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReloadConfigurationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ReloadServerConnection", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReloadServerConnection() {
            this.Invoke("ReloadServerConnection", new object[0]);
        }
        
        /// <remarks/>
        public void ReloadServerConnectionAsync() {
            this.ReloadServerConnectionAsync(null);
        }
        
        /// <remarks/>
        public void ReloadServerConnectionAsync(object userState) {
            if ((this.ReloadServerConnectionOperationCompleted == null)) {
                this.ReloadServerConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReloadServerConnectionOperationCompleted);
            }
            this.InvokeAsync("ReloadServerConnection", new object[0], this.ReloadServerConnectionOperationCompleted, userState);
        }
        
        private void OnReloadServerConnectionOperationCompleted(object arg) {
            if ((this.ReloadServerConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReloadServerConnectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ValidateUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ValidateUser(string userName, string password, bool winNtAuthentication, out string[] userCompanies, out int loginId, out bool userCannotChangePassword, out bool userMustChangePassword, out System.DateTime expiredDatePassword, out bool passwordNeverExpired, out bool expiredDateCannotChange) {
            object[] results = this.Invoke("ValidateUser", new object[] {
                        userName,
                        password,
                        winNtAuthentication});
            userCompanies = ((string[])(results[1]));
            loginId = ((int)(results[2]));
            userCannotChangePassword = ((bool)(results[3]));
            userMustChangePassword = ((bool)(results[4]));
            expiredDatePassword = ((System.DateTime)(results[5]));
            passwordNeverExpired = ((bool)(results[6]));
            expiredDateCannotChange = ((bool)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string userName, string password, bool winNtAuthentication) {
            this.ValidateUserAsync(userName, password, winNtAuthentication, null);
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string userName, string password, bool winNtAuthentication, object userState) {
            if ((this.ValidateUserOperationCompleted == null)) {
                this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
            }
            this.InvokeAsync("ValidateUser", new object[] {
                        userName,
                        password,
                        winNtAuthentication}, this.ValidateUserOperationCompleted, userState);
        }
        
        private void OnValidateUserOperationCompleted(object arg) {
            if ((this.ValidateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ConsumeMobileCal", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConsumeMobileCal(string authenticationToken) {
            object[] results = this.Invoke("ConsumeMobileCal", new object[] {
                        authenticationToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ConsumeMobileCalAsync(string authenticationToken) {
            this.ConsumeMobileCalAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void ConsumeMobileCalAsync(string authenticationToken, object userState) {
            if ((this.ConsumeMobileCalOperationCompleted == null)) {
                this.ConsumeMobileCalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsumeMobileCalOperationCompleted);
            }
            this.InvokeAsync("ConsumeMobileCal", new object[] {
                        authenticationToken}, this.ConsumeMobileCalOperationCompleted, userState);
        }
        
        private void OnConsumeMobileCalOperationCompleted(object arg) {
            if ((this.ConsumeMobileCalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsumeMobileCalCompleted(this, new ConsumeMobileCalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ConsumeInStoreCal", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConsumeInStoreCal(string authenticationToken) {
            object[] results = this.Invoke("ConsumeInStoreCal", new object[] {
                        authenticationToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ConsumeInStoreCalAsync(string authenticationToken) {
            this.ConsumeInStoreCalAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void ConsumeInStoreCalAsync(string authenticationToken, object userState) {
            if ((this.ConsumeInStoreCalOperationCompleted == null)) {
                this.ConsumeInStoreCalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsumeInStoreCalOperationCompleted);
            }
            this.InvokeAsync("ConsumeInStoreCal", new object[] {
                        authenticationToken}, this.ConsumeInStoreCalOperationCompleted, userState);
        }
        
        private void OnConsumeInStoreCalOperationCompleted(object arg) {
            if ((this.ConsumeInStoreCalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsumeInStoreCalCompleted(this, new ConsumeInStoreCalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ConsumeStockMoveCal", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConsumeStockMoveCal(string authenticationToken) {
            object[] results = this.Invoke("ConsumeStockMoveCal", new object[] {
                        authenticationToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ConsumeStockMoveCalAsync(string authenticationToken) {
            this.ConsumeStockMoveCalAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void ConsumeStockMoveCalAsync(string authenticationToken, object userState) {
            if ((this.ConsumeStockMoveCalOperationCompleted == null)) {
                this.ConsumeStockMoveCalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsumeStockMoveCalOperationCompleted);
            }
            this.InvokeAsync("ConsumeStockMoveCal", new object[] {
                        authenticationToken}, this.ConsumeStockMoveCalOperationCompleted, userState);
        }
        
        private void OnConsumeStockMoveCalOperationCompleted(object arg) {
            if ((this.ConsumeStockMoveCalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsumeStockMoveCalCompleted(this, new ConsumeStockMoveCalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ChangePassword", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangePassword(string userName, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string userName, string oldPassword, string newPassword) {
            this.ChangePasswordAsync(userName, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string userName, string oldPassword, string newPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginCompact", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginCompact(ref string userName, ref string companyName, string password, string askingProcess, bool overWriteLogin, out string authenticationToken) {
            object[] results = this.Invoke("LoginCompact", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin});
            userName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            authenticationToken = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginCompactAsync(string userName, string companyName, string password, string askingProcess, bool overWriteLogin) {
            this.LoginCompactAsync(userName, companyName, password, askingProcess, overWriteLogin, null);
        }
        
        /// <remarks/>
        public void LoginCompactAsync(string userName, string companyName, string password, string askingProcess, bool overWriteLogin, object userState) {
            if ((this.LoginCompactOperationCompleted == null)) {
                this.LoginCompactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCompactOperationCompleted);
            }
            this.InvokeAsync("LoginCompact", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin}, this.LoginCompactOperationCompleted, userState);
        }
        
        private void OnLoginCompactOperationCompleted(object arg) {
            if ((this.LoginCompactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompactCompleted(this, new LoginCompactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginCompactOnlyCheck", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginCompactOnlyCheck(ref string userName, ref string companyName, string password, string askingProcess, bool overWriteLogin, bool onlycheck, out string authenticationToken) {
            object[] results = this.Invoke("LoginCompactOnlyCheck", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin,
                        onlycheck});
            userName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            authenticationToken = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginCompactOnlyCheckAsync(string userName, string companyName, string password, string askingProcess, bool overWriteLogin, bool onlycheck) {
            this.LoginCompactOnlyCheckAsync(userName, companyName, password, askingProcess, overWriteLogin, onlycheck, null);
        }
        
        /// <remarks/>
        public void LoginCompactOnlyCheckAsync(string userName, string companyName, string password, string askingProcess, bool overWriteLogin, bool onlycheck, object userState) {
            if ((this.LoginCompactOnlyCheckOperationCompleted == null)) {
                this.LoginCompactOnlyCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCompactOnlyCheckOperationCompleted);
            }
            this.InvokeAsync("LoginCompactOnlyCheck", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin,
                        onlycheck}, this.LoginCompactOnlyCheckOperationCompleted, userState);
        }
        
        private void OnLoginCompactOnlyCheckOperationCompleted(object arg) {
            if ((this.LoginCompactOnlyCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompactOnlyCheckCompleted(this, new LoginCompactOnlyCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SSOLogOff", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SSOLogOff(string cryptedToken) {
            this.Invoke("SSOLogOff", new object[] {
                        cryptedToken});
        }
        
        /// <remarks/>
        public void SSOLogOffAsync(string cryptedToken) {
            this.SSOLogOffAsync(cryptedToken, null);
        }
        
        /// <remarks/>
        public void SSOLogOffAsync(string cryptedToken, object userState) {
            if ((this.SSOLogOffOperationCompleted == null)) {
                this.SSOLogOffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSSOLogOffOperationCompleted);
            }
            this.InvokeAsync("SSOLogOff", new object[] {
                        cryptedToken}, this.SSOLogOffOperationCompleted, userState);
        }
        
        private void OnSSOLogOffOperationCompleted(object arg) {
            if ((this.SSOLogOffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SSOLogOffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginViaInfinityToken2", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginViaInfinityToken2(string cryptedToken, string username, string password, string company, out string authenticationToken) {
            object[] results = this.Invoke("LoginViaInfinityToken2", new object[] {
                        cryptedToken,
                        username,
                        password,
                        company});
            authenticationToken = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginViaInfinityToken2Async(string cryptedToken, string username, string password, string company) {
            this.LoginViaInfinityToken2Async(cryptedToken, username, password, company, null);
        }
        
        /// <remarks/>
        public void LoginViaInfinityToken2Async(string cryptedToken, string username, string password, string company, object userState) {
            if ((this.LoginViaInfinityToken2OperationCompleted == null)) {
                this.LoginViaInfinityToken2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginViaInfinityToken2OperationCompleted);
            }
            this.InvokeAsync("LoginViaInfinityToken2", new object[] {
                        cryptedToken,
                        username,
                        password,
                        company}, this.LoginViaInfinityToken2OperationCompleted, userState);
        }
        
        private void OnLoginViaInfinityToken2OperationCompleted(object arg) {
            if ((this.LoginViaInfinityToken2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginViaInfinityToken2Completed(this, new LoginViaInfinityToken2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetIToken", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIToken(string authenticationToken) {
            object[] results = this.Invoke("GetIToken", new object[] {
                        authenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetITokenAsync(string authenticationToken) {
            this.GetITokenAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetITokenAsync(string authenticationToken, object userState) {
            if ((this.GetITokenOperationCompleted == null)) {
                this.GetITokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITokenOperationCompleted);
            }
            this.InvokeAsync("GetIToken", new object[] {
                        authenticationToken}, this.GetITokenOperationCompleted, userState);
        }
        
        private void OnGetITokenOperationCompleted(object arg) {
            if ((this.GetITokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITokenCompleted(this, new GetITokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetPATToken", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPATToken(string authenticationToken) {
            object[] results = this.Invoke("GetPATToken", new object[] {
                        authenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPATTokenAsync(string authenticationToken) {
            this.GetPATTokenAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetPATTokenAsync(string authenticationToken, object userState) {
            if ((this.GetPATTokenOperationCompleted == null)) {
                this.GetPATTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPATTokenOperationCompleted);
            }
            this.InvokeAsync("GetPATToken", new object[] {
                        authenticationToken}, this.GetPATTokenOperationCompleted, userState);
        }
        
        private void OnGetPATTokenOperationCompleted(object arg) {
            if ((this.GetPATTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPATTokenCompleted(this, new GetPATTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetServiceUserPasswordExpiration", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceUserPasswordExpiration() {
            object[] results = this.Invoke("GetServiceUserPasswordExpiration", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceUserPasswordExpirationAsync() {
            this.GetServiceUserPasswordExpirationAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceUserPasswordExpirationAsync(object userState) {
            if ((this.GetServiceUserPasswordExpirationOperationCompleted == null)) {
                this.GetServiceUserPasswordExpirationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceUserPasswordExpirationOperationCompleted);
            }
            this.InvokeAsync("GetServiceUserPasswordExpiration", new object[0], this.GetServiceUserPasswordExpirationOperationCompleted, userState);
        }
        
        private void OnGetServiceUserPasswordExpirationOperationCompleted(object arg) {
            if ((this.GetServiceUserPasswordExpirationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceUserPasswordExpirationCompleted(this, new GetServiceUserPasswordExpirationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ExistsSSOIDUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExistsSSOIDUser(string cryptedToken) {
            object[] results = this.Invoke("ExistsSSOIDUser", new object[] {
                        cryptedToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExistsSSOIDUserAsync(string cryptedToken) {
            this.ExistsSSOIDUserAsync(cryptedToken, null);
        }
        
        /// <remarks/>
        public void ExistsSSOIDUserAsync(string cryptedToken, object userState) {
            if ((this.ExistsSSOIDUserOperationCompleted == null)) {
                this.ExistsSSOIDUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExistsSSOIDUserOperationCompleted);
            }
            this.InvokeAsync("ExistsSSOIDUser", new object[] {
                        cryptedToken}, this.ExistsSSOIDUserOperationCompleted, userState);
        }
        
        private void OnExistsSSOIDUserOperationCompleted(object arg) {
            if ((this.ExistsSSOIDUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExistsSSOIDUserCompleted(this, new ExistsSSOIDUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LoginCheck", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoginCheck(string userName, string password) {
            object[] results = this.Invoke("LoginCheck", new object[] {
                        userName,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginCheckAsync(string userName, string password) {
            this.LoginCheckAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void LoginCheckAsync(string userName, string password, object userState) {
            if ((this.LoginCheckOperationCompleted == null)) {
                this.LoginCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCheckOperationCompleted);
            }
            this.InvokeAsync("LoginCheck", new object[] {
                        userName,
                        password}, this.LoginCheckOperationCompleted, userState);
        }
        
        private void OnLoginCheckOperationCompleted(object arg) {
            if ((this.LoginCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCheckCompleted(this, new LoginCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Login", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Login(
                    ref string userName, 
                    ref string companyName, 
                    string password, 
                    string askingProcess, 
                    bool overWriteLogin, 
                    bool onlycheck, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string applicationLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            object[] results = this.Invoke("Login", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin,
                        onlycheck});
            userName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            admin = ((bool)(results[3]));
            authenticationToken = ((string)(results[4]));
            companyId = ((int)(results[5]));
            dbName = ((string)(results[6]));
            dbServer = ((string)(results[7]));
            providerId = ((int)(results[8]));
            security = ((bool)(results[9]));
            auditing = ((bool)(results[10]));
            useKeyedUpdate = ((bool)(results[11]));
            transactionUse = ((bool)(results[12]));
            preferredLanguage = ((string)(results[13]));
            applicationLanguage = ((string)(results[14]));
            providerName = ((string)(results[15]));
            providerDescription = ((string)(results[16]));
            useConstParameter = ((bool)(results[17]));
            stripTrailingSpaces = ((bool)(results[18]));
            providerCompanyConnectionString = ((string)(results[19]));
            nonProviderCompanyConnectionString = ((string)(results[20]));
            dbUser = ((string)(results[21]));
            activationDB = ((string)(results[22]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string userName, string companyName, string password, string askingProcess, bool overWriteLogin, bool onlycheck) {
            this.LoginAsync(userName, companyName, password, askingProcess, overWriteLogin, onlycheck, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string userName, string companyName, string password, string askingProcess, bool overWriteLogin, bool onlycheck, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        overWriteLogin,
                        onlycheck}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Login2", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Login2(
                    ref string userName, 
                    ref string companyName, 
                    string password, 
                    string askingProcess, 
                    string macIp, 
                    bool overWriteLogin, 
                    bool onlycheck, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string applicationLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            object[] results = this.Invoke("Login2", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        macIp,
                        overWriteLogin,
                        onlycheck});
            userName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            admin = ((bool)(results[3]));
            authenticationToken = ((string)(results[4]));
            companyId = ((int)(results[5]));
            dbName = ((string)(results[6]));
            dbServer = ((string)(results[7]));
            providerId = ((int)(results[8]));
            security = ((bool)(results[9]));
            auditing = ((bool)(results[10]));
            useKeyedUpdate = ((bool)(results[11]));
            transactionUse = ((bool)(results[12]));
            preferredLanguage = ((string)(results[13]));
            applicationLanguage = ((string)(results[14]));
            providerName = ((string)(results[15]));
            providerDescription = ((string)(results[16]));
            useConstParameter = ((bool)(results[17]));
            stripTrailingSpaces = ((bool)(results[18]));
            providerCompanyConnectionString = ((string)(results[19]));
            nonProviderCompanyConnectionString = ((string)(results[20]));
            dbUser = ((string)(results[21]));
            activationDB = ((string)(results[22]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void Login2Async(string userName, string companyName, string password, string askingProcess, string macIp, bool overWriteLogin, bool onlycheck) {
            this.Login2Async(userName, companyName, password, askingProcess, macIp, overWriteLogin, onlycheck, null);
        }
        
        /// <remarks/>
        public void Login2Async(string userName, string companyName, string password, string askingProcess, string macIp, bool overWriteLogin, bool onlycheck, object userState) {
            if ((this.Login2OperationCompleted == null)) {
                this.Login2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogin2OperationCompleted);
            }
            this.InvokeAsync("Login2", new object[] {
                        userName,
                        companyName,
                        password,
                        askingProcess,
                        macIp,
                        overWriteLogin,
                        onlycheck}, this.Login2OperationCompleted, userState);
        }
        
        private void OnLogin2OperationCompleted(object arg) {
            if ((this.Login2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Login2Completed(this, new Login2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ConfirmToken", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConfirmToken(string authenticationToken, string procType) {
            object[] results = this.Invoke("ConfirmToken", new object[] {
                        authenticationToken,
                        procType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmTokenAsync(string authenticationToken, string procType) {
            this.ConfirmTokenAsync(authenticationToken, procType, null);
        }
        
        /// <remarks/>
        public void ConfirmTokenAsync(string authenticationToken, string procType, object userState) {
            if ((this.ConfirmTokenOperationCompleted == null)) {
                this.ConfirmTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmTokenOperationCompleted);
            }
            this.InvokeAsync("ConfirmToken", new object[] {
                        authenticationToken,
                        procType}, this.ConfirmTokenOperationCompleted, userState);
        }
        
        private void OnConfirmTokenOperationCompleted(object arg) {
            if ((this.ConfirmTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmTokenCompleted(this, new ConfirmTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetLoginInformation", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetLoginInformation(
                    string authenticationToken, 
                    out string userName, 
                    out int loginId, 
                    out string companyName, 
                    out int companyId, 
                    out bool admin, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out bool useUnicode, 
                    out string preferredLanguage, 
                    out string applicationLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string processName, 
                    out string userDescription, 
                    out string email, 
                    out bool easyBuilderDeveloper, 
                    out bool rowSecurity, 
                    out bool dataSynchro, 
                    out bool cgm) {
            object[] results = this.Invoke("GetLoginInformation", new object[] {
                        authenticationToken});
            userName = ((string)(results[1]));
            loginId = ((int)(results[2]));
            companyName = ((string)(results[3]));
            companyId = ((int)(results[4]));
            admin = ((bool)(results[5]));
            dbName = ((string)(results[6]));
            dbServer = ((string)(results[7]));
            providerId = ((int)(results[8]));
            security = ((bool)(results[9]));
            auditing = ((bool)(results[10]));
            useKeyedUpdate = ((bool)(results[11]));
            transactionUse = ((bool)(results[12]));
            useUnicode = ((bool)(results[13]));
            preferredLanguage = ((string)(results[14]));
            applicationLanguage = ((string)(results[15]));
            providerName = ((string)(results[16]));
            providerDescription = ((string)(results[17]));
            useConstParameter = ((bool)(results[18]));
            stripTrailingSpaces = ((bool)(results[19]));
            providerCompanyConnectionString = ((string)(results[20]));
            nonProviderCompanyConnectionString = ((string)(results[21]));
            dbUser = ((string)(results[22]));
            processName = ((string)(results[23]));
            userDescription = ((string)(results[24]));
            email = ((string)(results[25]));
            easyBuilderDeveloper = ((bool)(results[26]));
            rowSecurity = ((bool)(results[27]));
            dataSynchro = ((bool)(results[28]));
            cgm = ((bool)(results[29]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoginInformationAsync(string authenticationToken) {
            this.GetLoginInformationAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetLoginInformationAsync(string authenticationToken, object userState) {
            if ((this.GetLoginInformationOperationCompleted == null)) {
                this.GetLoginInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginInformationOperationCompleted);
            }
            this.InvokeAsync("GetLoginInformation", new object[] {
                        authenticationToken}, this.GetLoginInformationOperationCompleted, userState);
        }
        
        private void OnGetLoginInformationOperationCompleted(object arg) {
            if ((this.GetLoginInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginInformationCompleted(this, new GetLoginInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/LogOff", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogOff(string authenticationToken) {
            this.Invoke("LogOff", new object[] {
                        authenticationToken});
        }
        
        /// <remarks/>
        public void LogOffAsync(string authenticationToken) {
            this.LogOffAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void LogOffAsync(string authenticationToken, object userState) {
            if ((this.LogOffOperationCompleted == null)) {
                this.LogOffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogOffOperationCompleted);
            }
            this.InvokeAsync("LogOff", new object[] {
                        authenticationToken}, this.LogOffOperationCompleted, userState);
        }
        
        private void OnLogOffOperationCompleted(object arg) {
            if ((this.LogOffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogOffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserName(int loginId) {
            object[] results = this.Invoke("GetUserName", new object[] {
                        loginId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserNameAsync(int loginId) {
            this.GetUserNameAsync(loginId, null);
        }
        
        /// <remarks/>
        public void GetUserNameAsync(int loginId, object userState) {
            if ((this.GetUserNameOperationCompleted == null)) {
                this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
            }
            this.InvokeAsync("GetUserName", new object[] {
                        loginId}, this.GetUserNameOperationCompleted, userState);
        }
        
        private void OnGetUserNameOperationCompleted(object arg) {
            if ((this.GetUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserDescriptionById", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserDescriptionById(int loginId) {
            object[] results = this.Invoke("GetUserDescriptionById", new object[] {
                        loginId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDescriptionByIdAsync(int loginId) {
            this.GetUserDescriptionByIdAsync(loginId, null);
        }
        
        /// <remarks/>
        public void GetUserDescriptionByIdAsync(int loginId, object userState) {
            if ((this.GetUserDescriptionByIdOperationCompleted == null)) {
                this.GetUserDescriptionByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDescriptionByIdOperationCompleted);
            }
            this.InvokeAsync("GetUserDescriptionById", new object[] {
                        loginId}, this.GetUserDescriptionByIdOperationCompleted, userState);
        }
        
        private void OnGetUserDescriptionByIdOperationCompleted(object arg) {
            if ((this.GetUserDescriptionByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDescriptionByIdCompleted(this, new GetUserDescriptionByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserDescriptionByName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserDescriptionByName(string login) {
            object[] results = this.Invoke("GetUserDescriptionByName", new object[] {
                        login});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDescriptionByNameAsync(string login) {
            this.GetUserDescriptionByNameAsync(login, null);
        }
        
        /// <remarks/>
        public void GetUserDescriptionByNameAsync(string login, object userState) {
            if ((this.GetUserDescriptionByNameOperationCompleted == null)) {
                this.GetUserDescriptionByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDescriptionByNameOperationCompleted);
            }
            this.InvokeAsync("GetUserDescriptionByName", new object[] {
                        login}, this.GetUserDescriptionByNameOperationCompleted, userState);
        }
        
        private void OnGetUserDescriptionByNameOperationCompleted(object arg) {
            if ((this.GetUserDescriptionByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDescriptionByNameCompleted(this, new GetUserDescriptionByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserEMailByName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserEMailByName(string login) {
            object[] results = this.Invoke("GetUserEMailByName", new object[] {
                        login});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserEMailByNameAsync(string login) {
            this.GetUserEMailByNameAsync(login, null);
        }
        
        /// <remarks/>
        public void GetUserEMailByNameAsync(string login, object userState) {
            if ((this.GetUserEMailByNameOperationCompleted == null)) {
                this.GetUserEMailByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserEMailByNameOperationCompleted);
            }
            this.InvokeAsync("GetUserEMailByName", new object[] {
                        login}, this.GetUserEMailByNameOperationCompleted, userState);
        }
        
        private void OnGetUserEMailByNameOperationCompleted(object arg) {
            if ((this.GetUserEMailByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserEMailByNameCompleted(this, new GetUserEMailByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsFloatingUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFloatingUser(string loginName, out bool floating) {
            object[] results = this.Invoke("IsFloatingUser", new object[] {
                        loginName});
            floating = ((bool)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFloatingUserAsync(string loginName) {
            this.IsFloatingUserAsync(loginName, null);
        }
        
        /// <remarks/>
        public void IsFloatingUserAsync(string loginName, object userState) {
            if ((this.IsFloatingUserOperationCompleted == null)) {
                this.IsFloatingUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFloatingUserOperationCompleted);
            }
            this.InvokeAsync("IsFloatingUser", new object[] {
                        loginName}, this.IsFloatingUserOperationCompleted, userState);
        }
        
        private void OnIsFloatingUserOperationCompleted(object arg) {
            if ((this.IsFloatingUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFloatingUserCompleted(this, new IsFloatingUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsWebUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsWebUser(string loginName, out bool web) {
            object[] results = this.Invoke("IsWebUser", new object[] {
                        loginName});
            web = ((bool)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsWebUserAsync(string loginName) {
            this.IsWebUserAsync(loginName, null);
        }
        
        /// <remarks/>
        public void IsWebUserAsync(string loginName, object userState) {
            if ((this.IsWebUserOperationCompleted == null)) {
                this.IsWebUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsWebUserOperationCompleted);
            }
            this.InvokeAsync("IsWebUser", new object[] {
                        loginName}, this.IsWebUserOperationCompleted, userState);
        }
        
        private void OnIsWebUserOperationCompleted(object arg) {
            if ((this.IsWebUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsWebUserCompleted(this, new IsWebUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsWinNT", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsWinNT(int loginId) {
            object[] results = this.Invoke("IsWinNT", new object[] {
                        loginId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsWinNTAsync(int loginId) {
            this.IsWinNTAsync(loginId, null);
        }
        
        /// <remarks/>
        public void IsWinNTAsync(int loginId, object userState) {
            if ((this.IsWinNTOperationCompleted == null)) {
                this.IsWinNTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsWinNTOperationCompleted);
            }
            this.InvokeAsync("IsWinNT", new object[] {
                        loginId}, this.IsWinNTOperationCompleted, userState);
        }
        
        private void OnIsWinNTOperationCompleted(object arg) {
            if ((this.IsWinNTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsWinNTCompleted(this, new IsWinNTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDbOwner", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDbOwner(int companyId) {
            object[] results = this.Invoke("GetDbOwner", new object[] {
                        companyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDbOwnerAsync(int companyId) {
            this.GetDbOwnerAsync(companyId, null);
        }
        
        /// <remarks/>
        public void GetDbOwnerAsync(int companyId, object userState) {
            if ((this.GetDbOwnerOperationCompleted == null)) {
                this.GetDbOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDbOwnerOperationCompleted);
            }
            this.InvokeAsync("GetDbOwner", new object[] {
                        companyId}, this.GetDbOwnerOperationCompleted, userState);
        }
        
        private void OnGetDbOwnerOperationCompleted(object arg) {
            if ((this.GetDbOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDbOwnerCompleted(this, new GetDbOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsCompanySecured", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCompanySecured(int companyId) {
            object[] results = this.Invoke("IsCompanySecured", new object[] {
                        companyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCompanySecuredAsync(int companyId) {
            this.IsCompanySecuredAsync(companyId, null);
        }
        
        /// <remarks/>
        public void IsCompanySecuredAsync(int companyId, object userState) {
            if ((this.IsCompanySecuredOperationCompleted == null)) {
                this.IsCompanySecuredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCompanySecuredOperationCompleted);
            }
            this.InvokeAsync("IsCompanySecured", new object[] {
                        companyId}, this.IsCompanySecuredOperationCompleted, userState);
        }
        
        private void OnIsCompanySecuredOperationCompleted(object arg) {
            if ((this.IsCompanySecuredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCompanySecuredCompleted(this, new IsCompanySecuredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetAuthenticationInformations", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAuthenticationInformations(string authenticationToken, out int loginId, out int companyId, out bool webLogin) {
            object[] results = this.Invoke("GetAuthenticationInformations", new object[] {
                        authenticationToken});
            loginId = ((int)(results[1]));
            companyId = ((int)(results[2]));
            webLogin = ((bool)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthenticationInformationsAsync(string authenticationToken) {
            this.GetAuthenticationInformationsAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetAuthenticationInformationsAsync(string authenticationToken, object userState) {
            if ((this.GetAuthenticationInformationsOperationCompleted == null)) {
                this.GetAuthenticationInformationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthenticationInformationsOperationCompleted);
            }
            this.InvokeAsync("GetAuthenticationInformations", new object[] {
                        authenticationToken}, this.GetAuthenticationInformationsOperationCompleted, userState);
        }
        
        private void OnGetAuthenticationInformationsOperationCompleted(object arg) {
            if ((this.GetAuthenticationInformationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthenticationInformationsCompleted(this, new GetAuthenticationInformationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetAuthenticationNames", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAuthenticationNames(string authenticationToken, out string userName, out string companyName) {
            object[] results = this.Invoke("GetAuthenticationNames", new object[] {
                        authenticationToken});
            userName = ((string)(results[1]));
            companyName = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthenticationNamesAsync(string authenticationToken) {
            this.GetAuthenticationNamesAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetAuthenticationNamesAsync(string authenticationToken, object userState) {
            if ((this.GetAuthenticationNamesOperationCompleted == null)) {
                this.GetAuthenticationNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthenticationNamesOperationCompleted);
            }
            this.InvokeAsync("GetAuthenticationNames", new object[] {
                        authenticationToken}, this.GetAuthenticationNamesOperationCompleted, userState);
        }
        
        private void OnGetAuthenticationNamesOperationCompleted(object arg) {
            if ((this.GetAuthenticationNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthenticationNamesCompleted(this, new GetAuthenticationNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteAssociation", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteAssociation(int loginId, int companyId, string authenticationToken) {
            object[] results = this.Invoke("DeleteAssociation", new object[] {
                        loginId,
                        companyId,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAssociationAsync(int loginId, int companyId, string authenticationToken) {
            this.DeleteAssociationAsync(loginId, companyId, authenticationToken, null);
        }
        
        /// <remarks/>
        public void DeleteAssociationAsync(int loginId, int companyId, string authenticationToken, object userState) {
            if ((this.DeleteAssociationOperationCompleted == null)) {
                this.DeleteAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAssociationOperationCompleted);
            }
            this.InvokeAsync("DeleteAssociation", new object[] {
                        loginId,
                        companyId,
                        authenticationToken}, this.DeleteAssociationOperationCompleted, userState);
        }
        
        private void OnDeleteAssociationOperationCompleted(object arg) {
            if ((this.DeleteAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAssociationCompleted(this, new DeleteAssociationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteUser", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteUser(int loginId, string authenticationToken) {
            object[] results = this.Invoke("DeleteUser", new object[] {
                        loginId,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteUserAsync(int loginId, string authenticationToken) {
            this.DeleteUserAsync(loginId, authenticationToken, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(int loginId, string authenticationToken, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        loginId,
                        authenticationToken}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteCompany", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteCompany(int companyId, string authenticationToken) {
            object[] results = this.Invoke("DeleteCompany", new object[] {
                        companyId,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCompanyAsync(int companyId, string authenticationToken) {
            this.DeleteCompanyAsync(companyId, authenticationToken, null);
        }
        
        /// <remarks/>
        public void DeleteCompanyAsync(int companyId, string authenticationToken, object userState) {
            if ((this.DeleteCompanyOperationCompleted == null)) {
                this.DeleteCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCompanyOperationCompleted);
            }
            this.InvokeAsync("DeleteCompany", new object[] {
                        companyId,
                        authenticationToken}, this.DeleteCompanyOperationCompleted, userState);
        }
        
        private void OnDeleteCompanyOperationCompleted(object arg) {
            if ((this.DeleteCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompanyCompleted(this, new DeleteCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetSystemDBConnectionString", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSystemDBConnectionString(string authenticationToken) {
            object[] results = this.Invoke("GetSystemDBConnectionString", new object[] {
                        authenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemDBConnectionStringAsync(string authenticationToken) {
            this.GetSystemDBConnectionStringAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetSystemDBConnectionStringAsync(string authenticationToken, object userState) {
            if ((this.GetSystemDBConnectionStringOperationCompleted == null)) {
                this.GetSystemDBConnectionStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemDBConnectionStringOperationCompleted);
            }
            this.InvokeAsync("GetSystemDBConnectionString", new object[] {
                        authenticationToken}, this.GetSystemDBConnectionStringOperationCompleted, userState);
        }
        
        private void OnGetSystemDBConnectionStringOperationCompleted(object arg) {
            if ((this.GetSystemDBConnectionStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemDBConnectionStringCompleted(this, new GetSystemDBConnectionStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDMSConnectionString", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDMSConnectionString(string authenticationToken) {
            object[] results = this.Invoke("GetDMSConnectionString", new object[] {
                        authenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDMSConnectionStringAsync(string authenticationToken) {
            this.GetDMSConnectionStringAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetDMSConnectionStringAsync(string authenticationToken, object userState) {
            if ((this.GetDMSConnectionStringOperationCompleted == null)) {
                this.GetDMSConnectionStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDMSConnectionStringOperationCompleted);
            }
            this.InvokeAsync("GetDMSConnectionString", new object[] {
                        authenticationToken}, this.GetDMSConnectionStringOperationCompleted, userState);
        }
        
        private void OnGetDMSConnectionStringOperationCompleted(object arg) {
            if ((this.GetDMSConnectionStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDMSConnectionStringCompleted(this, new GetDMSConnectionStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Sql2012Allowed", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Sql2012Allowed(string authToken) {
            object[] results = this.Invoke("Sql2012Allowed", new object[] {
                        authToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Sql2012AllowedAsync(string authToken) {
            this.Sql2012AllowedAsync(authToken, null);
        }
        
        /// <remarks/>
        public void Sql2012AllowedAsync(string authToken, object userState) {
            if ((this.Sql2012AllowedOperationCompleted == null)) {
                this.Sql2012AllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSql2012AllowedOperationCompleted);
            }
            this.InvokeAsync("Sql2012Allowed", new object[] {
                        authToken}, this.Sql2012AllowedOperationCompleted, userState);
        }
        
        private void OnSql2012AllowedOperationCompleted(object arg) {
            if ((this.Sql2012AllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Sql2012AllowedCompleted(this, new Sql2012AllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SetDefaultSchema", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDefaultSchema(string authenticationToken, string company, out string d, out string c, out int p) {
            object[] results = this.Invoke("SetDefaultSchema", new object[] {
                        authenticationToken,
                        company});
            d = ((string)(results[1]));
            c = ((string)(results[2]));
            p = ((int)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDefaultSchemaAsync(string authenticationToken, string company) {
            this.SetDefaultSchemaAsync(authenticationToken, company, null);
        }
        
        /// <remarks/>
        public void SetDefaultSchemaAsync(string authenticationToken, string company, object userState) {
            if ((this.SetDefaultSchemaOperationCompleted == null)) {
                this.SetDefaultSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultSchemaOperationCompleted);
            }
            this.InvokeAsync("SetDefaultSchema", new object[] {
                        authenticationToken,
                        company}, this.SetDefaultSchemaOperationCompleted, userState);
        }
        
        private void OnSetDefaultSchemaOperationCompleted(object arg) {
            if ((this.SetDefaultSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultSchemaCompleted(this, new SetDefaultSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDMSDatabasesInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DmsDatabaseInfo[] GetDMSDatabasesInfo(string authenticationToken) {
            object[] results = this.Invoke("GetDMSDatabasesInfo", new object[] {
                        authenticationToken});
            return ((DmsDatabaseInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDMSDatabasesInfoAsync(string authenticationToken) {
            this.GetDMSDatabasesInfoAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetDMSDatabasesInfoAsync(string authenticationToken, object userState) {
            if ((this.GetDMSDatabasesInfoOperationCompleted == null)) {
                this.GetDMSDatabasesInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDMSDatabasesInfoOperationCompleted);
            }
            this.InvokeAsync("GetDMSDatabasesInfo", new object[] {
                        authenticationToken}, this.GetDMSDatabasesInfoOperationCompleted, userState);
        }
        
        private void OnGetDMSDatabasesInfoOperationCompleted(object arg) {
            if ((this.GetDMSDatabasesInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDMSDatabasesInfoCompleted(this, new GetDMSDatabasesInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDataSynchroDatabasesInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataSynchroDatabaseInfo[] GetDataSynchroDatabasesInfo(string authenticationToken) {
            object[] results = this.Invoke("GetDataSynchroDatabasesInfo", new object[] {
                        authenticationToken});
            return ((DataSynchroDatabaseInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSynchroDatabasesInfoAsync(string authenticationToken) {
            this.GetDataSynchroDatabasesInfoAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetDataSynchroDatabasesInfoAsync(string authenticationToken, object userState) {
            if ((this.GetDataSynchroDatabasesInfoOperationCompleted == null)) {
                this.GetDataSynchroDatabasesInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSynchroDatabasesInfoOperationCompleted);
            }
            this.InvokeAsync("GetDataSynchroDatabasesInfo", new object[] {
                        authenticationToken}, this.GetDataSynchroDatabasesInfoOperationCompleted, userState);
        }
        
        private void OnGetDataSynchroDatabasesInfoOperationCompleted(object arg) {
            if ((this.GetDataSynchroDatabasesInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSynchroDatabasesInfoCompleted(this, new GetDataSynchroDatabasesInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCompanyDatabasesInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TbSenderDatabaseInfo[] GetCompanyDatabasesInfo(string authenticationToken) {
            object[] results = this.Invoke("GetCompanyDatabasesInfo", new object[] {
                        authenticationToken});
            return ((TbSenderDatabaseInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyDatabasesInfoAsync(string authenticationToken) {
            this.GetCompanyDatabasesInfoAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetCompanyDatabasesInfoAsync(string authenticationToken, object userState) {
            if ((this.GetCompanyDatabasesInfoOperationCompleted == null)) {
                this.GetCompanyDatabasesInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyDatabasesInfoOperationCompleted);
            }
            this.InvokeAsync("GetCompanyDatabasesInfo", new object[] {
                        authenticationToken}, this.GetCompanyDatabasesInfoOperationCompleted, userState);
        }
        
        private void OnGetCompanyDatabasesInfoOperationCompleted(object arg) {
            if ((this.GetCompanyDatabasesInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyDatabasesInfoCompleted(this, new GetCompanyDatabasesInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetEdition", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEdition() {
            object[] results = this.Invoke("GetEdition", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEditionAsync() {
            this.GetEditionAsync(null);
        }
        
        /// <remarks/>
        public void GetEditionAsync(object userState) {
            if ((this.GetEditionOperationCompleted == null)) {
                this.GetEditionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEditionOperationCompleted);
            }
            this.InvokeAsync("GetEdition", new object[0], this.GetEditionOperationCompleted, userState);
        }
        
        private void OnGetEditionOperationCompleted(object arg) {
            if ((this.GetEditionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEditionCompleted(this, new GetEditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetConfigurationStream", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetConfigurationStream() {
            object[] results = this.Invoke("GetConfigurationStream", new object[0]);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigurationStreamAsync() {
            this.GetConfigurationStreamAsync(null);
        }
        
        /// <remarks/>
        public void GetConfigurationStreamAsync(object userState) {
            if ((this.GetConfigurationStreamOperationCompleted == null)) {
                this.GetConfigurationStreamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationStreamOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationStream", new object[0], this.GetConfigurationStreamOperationCompleted, userState);
        }
        
        private void OnGetConfigurationStreamOperationCompleted(object arg) {
            if ((this.GetConfigurationStreamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationStreamCompleted(this, new GetConfigurationStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCountry", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCountry() {
            object[] results = this.Invoke("GetCountry", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCountryAsync() {
            this.GetCountryAsync(null);
        }
        
        /// <remarks/>
        public void GetCountryAsync(object userState) {
            if ((this.GetCountryOperationCompleted == null)) {
                this.GetCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountryOperationCompleted);
            }
            this.InvokeAsync("GetCountry", new object[0], this.GetCountryOperationCompleted, userState);
        }
        
        private void OnGetCountryOperationCompleted(object arg) {
            if ((this.GetCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountryCompleted(this, new GetCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetProviderNameFromCompanyId", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProviderNameFromCompanyId(int companyId) {
            object[] results = this.Invoke("GetProviderNameFromCompanyId", new object[] {
                        companyId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProviderNameFromCompanyIdAsync(int companyId) {
            this.GetProviderNameFromCompanyIdAsync(companyId, null);
        }
        
        /// <remarks/>
        public void GetProviderNameFromCompanyIdAsync(int companyId, object userState) {
            if ((this.GetProviderNameFromCompanyIdOperationCompleted == null)) {
                this.GetProviderNameFromCompanyIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProviderNameFromCompanyIdOperationCompleted);
            }
            this.InvokeAsync("GetProviderNameFromCompanyId", new object[] {
                        companyId}, this.GetProviderNameFromCompanyIdOperationCompleted, userState);
        }
        
        private void OnGetProviderNameFromCompanyIdOperationCompleted(object arg) {
            if ((this.GetProviderNameFromCompanyIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProviderNameFromCompanyIdCompleted(this, new GetProviderNameFromCompanyIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetInstallationVersion", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInstallationVersion(out string productName, out System.DateTime buildDate, out System.DateTime instDate, out int build) {
            object[] results = this.Invoke("GetInstallationVersion", new object[0]);
            productName = ((string)(results[1]));
            buildDate = ((System.DateTime)(results[2]));
            instDate = ((System.DateTime)(results[3]));
            build = ((int)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstallationVersionAsync() {
            this.GetInstallationVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetInstallationVersionAsync(object userState) {
            if ((this.GetInstallationVersionOperationCompleted == null)) {
                this.GetInstallationVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstallationVersionOperationCompleted);
            }
            this.InvokeAsync("GetInstallationVersion", new object[0], this.GetInstallationVersionOperationCompleted, userState);
        }
        
        private void OnGetInstallationVersionOperationCompleted(object arg) {
            if ((this.GetInstallationVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstallationVersionCompleted(this, new GetInstallationVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserInfo() {
            object[] results = this.Invoke("GetUserInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync() {
            this.GetUserInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[0], this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserInfoID", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserInfoID() {
            object[] results = this.Invoke("GetUserInfoID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoIDAsync() {
            this.GetUserInfoIDAsync(null);
        }
        
        /// <remarks/>
        public void GetUserInfoIDAsync(object userState) {
            if ((this.GetUserInfoIDOperationCompleted == null)) {
                this.GetUserInfoIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoIDOperationCompleted);
            }
            this.InvokeAsync("GetUserInfoID", new object[0], this.GetUserInfoIDOperationCompleted, userState);
        }
        
        private void OnGetUserInfoIDOperationCompleted(object arg) {
            if ((this.GetUserInfoIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoIDCompleted(this, new GetUserInfoIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/TraceAction", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TraceAction(string company, string login, int type, string processName, string winUser, string location) {
            this.Invoke("TraceAction", new object[] {
                        company,
                        login,
                        type,
                        processName,
                        winUser,
                        location});
        }
        
        /// <remarks/>
        public void TraceActionAsync(string company, string login, int type, string processName, string winUser, string location) {
            this.TraceActionAsync(company, login, type, processName, winUser, location, null);
        }
        
        /// <remarks/>
        public void TraceActionAsync(string company, string login, int type, string processName, string winUser, string location, object userState) {
            if ((this.TraceActionOperationCompleted == null)) {
                this.TraceActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTraceActionOperationCompleted);
            }
            this.InvokeAsync("TraceAction", new object[] {
                        company,
                        login,
                        type,
                        processName,
                        winUser,
                        location}, this.TraceActionOperationCompleted, userState);
        }
        
        private void OnTraceActionOperationCompleted(object arg) {
            if ((this.TraceActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TraceActionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/HasUserAlreadyChangedPasswordToday", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasUserAlreadyChangedPasswordToday(string user) {
            object[] results = this.Invoke("HasUserAlreadyChangedPasswordToday", new object[] {
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasUserAlreadyChangedPasswordTodayAsync(string user) {
            this.HasUserAlreadyChangedPasswordTodayAsync(user, null);
        }
        
        /// <remarks/>
        public void HasUserAlreadyChangedPasswordTodayAsync(string user, object userState) {
            if ((this.HasUserAlreadyChangedPasswordTodayOperationCompleted == null)) {
                this.HasUserAlreadyChangedPasswordTodayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasUserAlreadyChangedPasswordTodayOperationCompleted);
            }
            this.InvokeAsync("HasUserAlreadyChangedPasswordToday", new object[] {
                        user}, this.HasUserAlreadyChangedPasswordTodayOperationCompleted, userState);
        }
        
        private void OnHasUserAlreadyChangedPasswordTodayOperationCompleted(object arg) {
            if ((this.HasUserAlreadyChangedPasswordTodayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasUserAlreadyChangedPasswordTodayCompleted(this, new HasUserAlreadyChangedPasswordTodayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetBrandedApplicationTitle", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBrandedApplicationTitle(string application) {
            object[] results = this.Invoke("GetBrandedApplicationTitle", new object[] {
                        application});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrandedApplicationTitleAsync(string application) {
            this.GetBrandedApplicationTitleAsync(application, null);
        }
        
        /// <remarks/>
        public void GetBrandedApplicationTitleAsync(string application, object userState) {
            if ((this.GetBrandedApplicationTitleOperationCompleted == null)) {
                this.GetBrandedApplicationTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrandedApplicationTitleOperationCompleted);
            }
            this.InvokeAsync("GetBrandedApplicationTitle", new object[] {
                        application}, this.GetBrandedApplicationTitleOperationCompleted, userState);
        }
        
        private void OnGetBrandedApplicationTitleOperationCompleted(object arg) {
            if ((this.GetBrandedApplicationTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrandedApplicationTitleCompleted(this, new GetBrandedApplicationTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetMasterProductBrandedName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMasterProductBrandedName() {
            object[] results = this.Invoke("GetMasterProductBrandedName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterProductBrandedNameAsync() {
            this.GetMasterProductBrandedNameAsync(null);
        }
        
        /// <remarks/>
        public void GetMasterProductBrandedNameAsync(object userState) {
            if ((this.GetMasterProductBrandedNameOperationCompleted == null)) {
                this.GetMasterProductBrandedNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterProductBrandedNameOperationCompleted);
            }
            this.InvokeAsync("GetMasterProductBrandedName", new object[0], this.GetMasterProductBrandedNameOperationCompleted, userState);
        }
        
        private void OnGetMasterProductBrandedNameOperationCompleted(object arg) {
            if ((this.GetMasterProductBrandedNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterProductBrandedNameCompleted(this, new GetMasterProductBrandedNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetMasterSolutionBrandedName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMasterSolutionBrandedName() {
            object[] results = this.Invoke("GetMasterSolutionBrandedName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterSolutionBrandedNameAsync() {
            this.GetMasterSolutionBrandedNameAsync(null);
        }
        
        /// <remarks/>
        public void GetMasterSolutionBrandedNameAsync(object userState) {
            if ((this.GetMasterSolutionBrandedNameOperationCompleted == null)) {
                this.GetMasterSolutionBrandedNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterSolutionBrandedNameOperationCompleted);
            }
            this.InvokeAsync("GetMasterSolutionBrandedName", new object[0], this.GetMasterSolutionBrandedNameOperationCompleted, userState);
        }
        
        private void OnGetMasterSolutionBrandedNameOperationCompleted(object arg) {
            if ((this.GetMasterSolutionBrandedNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterSolutionBrandedNameCompleted(this, new GetMasterSolutionBrandedNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetMasterSolution", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMasterSolution() {
            object[] results = this.Invoke("GetMasterSolution", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterSolutionAsync() {
            this.GetMasterSolutionAsync(null);
        }
        
        /// <remarks/>
        public void GetMasterSolutionAsync(object userState) {
            if ((this.GetMasterSolutionOperationCompleted == null)) {
                this.GetMasterSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterSolutionOperationCompleted);
            }
            this.InvokeAsync("GetMasterSolution", new object[0], this.GetMasterSolutionOperationCompleted, userState);
        }
        
        private void OnGetMasterSolutionOperationCompleted(object arg) {
            if ((this.GetMasterSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterSolutionCompleted(this, new GetMasterSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetBrandedProducerName", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBrandedProducerName() {
            object[] results = this.Invoke("GetBrandedProducerName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrandedProducerNameAsync() {
            this.GetBrandedProducerNameAsync(null);
        }
        
        /// <remarks/>
        public void GetBrandedProducerNameAsync(object userState) {
            if ((this.GetBrandedProducerNameOperationCompleted == null)) {
                this.GetBrandedProducerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrandedProducerNameOperationCompleted);
            }
            this.InvokeAsync("GetBrandedProducerName", new object[0], this.GetBrandedProducerNameOperationCompleted, userState);
        }
        
        private void OnGetBrandedProducerNameOperationCompleted(object arg) {
            if ((this.GetBrandedProducerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrandedProducerNameCompleted(this, new GetBrandedProducerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetBrandedProductTitle", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBrandedProductTitle() {
            object[] results = this.Invoke("GetBrandedProductTitle", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrandedProductTitleAsync() {
            this.GetBrandedProductTitleAsync(null);
        }
        
        /// <remarks/>
        public void GetBrandedProductTitleAsync(object userState) {
            if ((this.GetBrandedProductTitleOperationCompleted == null)) {
                this.GetBrandedProductTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrandedProductTitleOperationCompleted);
            }
            this.InvokeAsync("GetBrandedProductTitle", new object[0], this.GetBrandedProductTitleOperationCompleted, userState);
        }
        
        private void OnGetBrandedProductTitleOperationCompleted(object arg) {
            if ((this.GetBrandedProductTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrandedProductTitleCompleted(this, new GetBrandedProductTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetBrandedKey", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBrandedKey(string source) {
            object[] results = this.Invoke("GetBrandedKey", new object[] {
                        source});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrandedKeyAsync(string source) {
            this.GetBrandedKeyAsync(source, null);
        }
        
        /// <remarks/>
        public void GetBrandedKeyAsync(string source, object userState) {
            if ((this.GetBrandedKeyOperationCompleted == null)) {
                this.GetBrandedKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrandedKeyOperationCompleted);
            }
            this.InvokeAsync("GetBrandedKey", new object[] {
                        source}, this.GetBrandedKeyOperationCompleted, userState);
        }
        
        private void OnGetBrandedKeyOperationCompleted(object arg) {
            if ((this.GetBrandedKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrandedKeyCompleted(this, new GetBrandedKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDBNetworkType", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DBNetworkType GetDBNetworkType() {
            object[] results = this.Invoke("GetDBNetworkType", new object[0]);
            return ((DBNetworkType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBNetworkTypeAsync() {
            this.GetDBNetworkTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetDBNetworkTypeAsync(object userState) {
            if ((this.GetDBNetworkTypeOperationCompleted == null)) {
                this.GetDBNetworkTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBNetworkTypeOperationCompleted);
            }
            this.InvokeAsync("GetDBNetworkType", new object[0], this.GetDBNetworkTypeOperationCompleted, userState);
        }
        
        private void OnGetDBNetworkTypeOperationCompleted(object arg) {
            if ((this.GetDBNetworkTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBNetworkTypeCompleted(this, new GetDBNetworkTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetDatabaseType", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDatabaseType(string providerName) {
            object[] results = this.Invoke("GetDatabaseType", new object[] {
                        providerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDatabaseTypeAsync(string providerName) {
            this.GetDatabaseTypeAsync(providerName, null);
        }
        
        /// <remarks/>
        public void GetDatabaseTypeAsync(string providerName, object userState) {
            if ((this.GetDatabaseTypeOperationCompleted == null)) {
                this.GetDatabaseTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDatabaseTypeOperationCompleted);
            }
            this.InvokeAsync("GetDatabaseType", new object[] {
                        providerName}, this.GetDatabaseTypeOperationCompleted, userState);
        }
        
        private void OnGetDatabaseTypeOperationCompleted(object arg) {
            if ((this.GetDatabaseTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDatabaseTypeCompleted(this, new GetDatabaseTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/CanUseNamespace", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CanUseNamespace(string nameSpace, string authenticationToken, GrantType grantType) {
            object[] results = this.Invoke("CanUseNamespace", new object[] {
                        nameSpace,
                        authenticationToken,
                        grantType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CanUseNamespaceAsync(string nameSpace, string authenticationToken, GrantType grantType) {
            this.CanUseNamespaceAsync(nameSpace, authenticationToken, grantType, null);
        }
        
        /// <remarks/>
        public void CanUseNamespaceAsync(string nameSpace, string authenticationToken, GrantType grantType, object userState) {
            if ((this.CanUseNamespaceOperationCompleted == null)) {
                this.CanUseNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanUseNamespaceOperationCompleted);
            }
            this.InvokeAsync("CanUseNamespace", new object[] {
                        nameSpace,
                        authenticationToken,
                        grantType}, this.CanUseNamespaceOperationCompleted, userState);
        }
        
        private void OnCanUseNamespaceOperationCompleted(object arg) {
            if ((this.CanUseNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanUseNamespaceCompleted(this, new CanUseNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/CacheCounter", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CacheCounter() {
            object[] results = this.Invoke("CacheCounter", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CacheCounterAsync() {
            this.CacheCounterAsync(null);
        }
        
        /// <remarks/>
        public void CacheCounterAsync(object userState) {
            if ((this.CacheCounterOperationCompleted == null)) {
                this.CacheCounterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCacheCounterOperationCompleted);
            }
            this.InvokeAsync("CacheCounter", new object[0], this.CacheCounterOperationCompleted, userState);
        }
        
        private void OnCacheCounterOperationCompleted(object arg) {
            if ((this.CacheCounterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CacheCounterCompleted(this, new CacheCounterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/CacheCounterGTG", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SerialNumberType CacheCounterGTG() {
            object[] results = this.Invoke("CacheCounterGTG", new object[0]);
            return ((SerialNumberType)(results[0]));
        }
        
        /// <remarks/>
        public void CacheCounterGTGAsync() {
            this.CacheCounterGTGAsync(null);
        }
        
        /// <remarks/>
        public void CacheCounterGTGAsync(object userState) {
            if ((this.CacheCounterGTGOperationCompleted == null)) {
                this.CacheCounterGTGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCacheCounterGTGOperationCompleted);
            }
            this.InvokeAsync("CacheCounterGTG", new object[0], this.CacheCounterGTGOperationCompleted, userState);
        }
        
        private void OnCacheCounterGTGOperationCompleted(object arg) {
            if ((this.CacheCounterGTGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CacheCounterGTGCompleted(this, new CacheCounterGTGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SetCurrentComponents", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ActivationState SetCurrentComponents(out int dte) {
            object[] results = this.Invoke("SetCurrentComponents", new object[0]);
            dte = ((int)(results[1]));
            return ((ActivationState)(results[0]));
        }
        
        /// <remarks/>
        public void SetCurrentComponentsAsync() {
            this.SetCurrentComponentsAsync(null);
        }
        
        /// <remarks/>
        public void SetCurrentComponentsAsync(object userState) {
            if ((this.SetCurrentComponentsOperationCompleted == null)) {
                this.SetCurrentComponentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCurrentComponentsOperationCompleted);
            }
            this.InvokeAsync("SetCurrentComponents", new object[0], this.SetCurrentComponentsOperationCompleted, userState);
        }
        
        private void OnSetCurrentComponentsOperationCompleted(object arg) {
            if ((this.SetCurrentComponentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCurrentComponentsCompleted(this, new SetCurrentComponentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsVirginActivation", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsVirginActivation() {
            object[] results = this.Invoke("IsVirginActivation", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsVirginActivationAsync() {
            this.IsVirginActivationAsync(null);
        }
        
        /// <remarks/>
        public void IsVirginActivationAsync(object userState) {
            if ((this.IsVirginActivationOperationCompleted == null)) {
                this.IsVirginActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsVirginActivationOperationCompleted);
            }
            this.InvokeAsync("IsVirginActivation", new object[0], this.IsVirginActivationOperationCompleted, userState);
        }
        
        private void OnIsVirginActivationOperationCompleted(object arg) {
            if ((this.IsVirginActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsVirginActivationCompleted(this, new IsVirginActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/HD", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int HD() {
            object[] results = this.Invoke("HD", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void HDAsync() {
            this.HDAsync(null);
        }
        
        /// <remarks/>
        public void HDAsync(object userState) {
            if ((this.HDOperationCompleted == null)) {
                this.HDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHDOperationCompleted);
            }
            this.InvokeAsync("HD", new object[0], this.HDOperationCompleted, userState);
        }
        
        private void OnHDOperationCompleted(object arg) {
            if ((this.HDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HDCompleted(this, new HDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/StoreMLUChoice", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StoreMLUChoice(bool userChoseMluInChargeToMicroarea) {
            this.Invoke("StoreMLUChoice", new object[] {
                        userChoseMluInChargeToMicroarea});
        }
        
        /// <remarks/>
        public void StoreMLUChoiceAsync(bool userChoseMluInChargeToMicroarea) {
            this.StoreMLUChoiceAsync(userChoseMluInChargeToMicroarea, null);
        }
        
        /// <remarks/>
        public void StoreMLUChoiceAsync(bool userChoseMluInChargeToMicroarea, object userState) {
            if ((this.StoreMLUChoiceOperationCompleted == null)) {
                this.StoreMLUChoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreMLUChoiceOperationCompleted);
            }
            this.InvokeAsync("StoreMLUChoice", new object[] {
                        userChoseMluInChargeToMicroarea}, this.StoreMLUChoiceOperationCompleted, userState);
        }
        
        private void OnStoreMLUChoiceOperationCompleted(object arg) {
            if ((this.StoreMLUChoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoreMLUChoiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SaveLicensed", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveLicensed(string xml, string name) {
            object[] results = this.Invoke("SaveLicensed", new object[] {
                        xml,
                        name});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveLicensedAsync(string xml, string name) {
            this.SaveLicensedAsync(xml, name, null);
        }
        
        /// <remarks/>
        public void SaveLicensedAsync(string xml, string name, object userState) {
            if ((this.SaveLicensedOperationCompleted == null)) {
                this.SaveLicensedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLicensedOperationCompleted);
            }
            this.InvokeAsync("SaveLicensed", new object[] {
                        xml,
                        name}, this.SaveLicensedOperationCompleted, userState);
        }
        
        private void OnSaveLicensedOperationCompleted(object arg) {
            if ((this.SaveLicensedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveLicensedCompleted(this, new SaveLicensedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ValidateIToken", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateIToken(string itoken, string authenticationToken) {
            object[] results = this.Invoke("ValidateIToken", new object[] {
                        itoken,
                        authenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateITokenAsync(string itoken, string authenticationToken) {
            this.ValidateITokenAsync(itoken, authenticationToken, null);
        }
        
        /// <remarks/>
        public void ValidateITokenAsync(string itoken, string authenticationToken, object userState) {
            if ((this.ValidateITokenOperationCompleted == null)) {
                this.ValidateITokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateITokenOperationCompleted);
            }
            this.InvokeAsync("ValidateIToken", new object[] {
                        itoken,
                        authenticationToken}, this.ValidateITokenOperationCompleted, userState);
        }
        
        private void OnValidateITokenOperationCompleted(object arg) {
            if ((this.ValidateITokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateITokenCompleted(this, new ValidateITokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SaveUserInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveUserInfo(string xml) {
            object[] results = this.Invoke("SaveUserInfo", new object[] {
                        xml});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveUserInfoAsync(string xml) {
            this.SaveUserInfoAsync(xml, null);
        }
        
        /// <remarks/>
        public void SaveUserInfoAsync(string xml, object userState) {
            if ((this.SaveUserInfoOperationCompleted == null)) {
                this.SaveUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUserInfoOperationCompleted);
            }
            this.InvokeAsync("SaveUserInfo", new object[] {
                        xml}, this.SaveUserInfoOperationCompleted, userState);
        }
        
        private void OnSaveUserInfoOperationCompleted(object arg) {
            if ((this.SaveUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveUserInfoCompleted(this, new SaveUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteUserInfo", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserInfo() {
            this.Invoke("DeleteUserInfo", new object[0]);
        }
        
        /// <remarks/>
        public void DeleteUserInfoAsync() {
            this.DeleteUserInfoAsync(null);
        }
        
        /// <remarks/>
        public void DeleteUserInfoAsync(object userState) {
            if ((this.DeleteUserInfoOperationCompleted == null)) {
                this.DeleteUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserInfoOperationCompleted);
            }
            this.InvokeAsync("DeleteUserInfo", new object[0], this.DeleteUserInfoOperationCompleted, userState);
        }
        
        private void OnDeleteUserInfoOperationCompleted(object arg) {
            if ((this.DeleteUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/DeleteLicensed", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLicensed(string name) {
            this.Invoke("DeleteLicensed", new object[] {
                        name});
        }
        
        /// <remarks/>
        public void DeleteLicensedAsync(string name) {
            this.DeleteLicensedAsync(name, null);
        }
        
        /// <remarks/>
        public void DeleteLicensedAsync(string name, object userState) {
            if ((this.DeleteLicensedOperationCompleted == null)) {
                this.DeleteLicensedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLicensedOperationCompleted);
            }
            this.InvokeAsync("DeleteLicensed", new object[] {
                        name}, this.DeleteLicensedOperationCompleted, userState);
        }
        
        private void OnDeleteLicensedOperationCompleted(object arg) {
            if ((this.DeleteLicensedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLicensedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/PrePing", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrePing() {
            object[] results = this.Invoke("PrePing", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrePingAsync() {
            this.PrePingAsync(null);
        }
        
        /// <remarks/>
        public void PrePingAsync(object userState) {
            if ((this.PrePingOperationCompleted == null)) {
                this.PrePingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrePingOperationCompleted);
            }
            this.InvokeAsync("PrePing", new object[0], this.PrePingOperationCompleted, userState);
        }
        
        private void OnPrePingOperationCompleted(object arg) {
            if ((this.PrePingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrePingCompleted(this, new PrePingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Ping", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetArticlesWithNamedCal", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ModuleNameInfo[] GetArticlesWithNamedCal() {
            object[] results = this.Invoke("GetArticlesWithNamedCal", new object[0]);
            return ((ModuleNameInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArticlesWithNamedCalAsync() {
            this.GetArticlesWithNamedCalAsync(null);
        }
        
        /// <remarks/>
        public void GetArticlesWithNamedCalAsync(object userState) {
            if ((this.GetArticlesWithNamedCalOperationCompleted == null)) {
                this.GetArticlesWithNamedCalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArticlesWithNamedCalOperationCompleted);
            }
            this.InvokeAsync("GetArticlesWithNamedCal", new object[0], this.GetArticlesWithNamedCalOperationCompleted, userState);
        }
        
        private void OnGetArticlesWithNamedCalOperationCompleted(object arg) {
            if ((this.GetArticlesWithNamedCalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArticlesWithNamedCalCompleted(this, new GetArticlesWithNamedCalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetArticlesWithFloatingCal", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ModuleNameInfo[] GetArticlesWithFloatingCal() {
            object[] results = this.Invoke("GetArticlesWithFloatingCal", new object[0]);
            return ((ModuleNameInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArticlesWithFloatingCalAsync() {
            this.GetArticlesWithFloatingCalAsync(null);
        }
        
        /// <remarks/>
        public void GetArticlesWithFloatingCalAsync(object userState) {
            if ((this.GetArticlesWithFloatingCalOperationCompleted == null)) {
                this.GetArticlesWithFloatingCalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArticlesWithFloatingCalOperationCompleted);
            }
            this.InvokeAsync("GetArticlesWithFloatingCal", new object[0], this.GetArticlesWithFloatingCalOperationCompleted, userState);
        }
        
        private void OnGetArticlesWithFloatingCalOperationCompleted(object arg) {
            if ((this.GetArticlesWithFloatingCalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArticlesWithFloatingCalCompleted(this, new GetArticlesWithFloatingCalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/RefreshFloatingMark", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RefreshFloatingMark() {
            this.Invoke("RefreshFloatingMark", new object[0]);
        }
        
        /// <remarks/>
        public void RefreshFloatingMarkAsync() {
            this.RefreshFloatingMarkAsync(null);
        }
        
        /// <remarks/>
        public void RefreshFloatingMarkAsync(object userState) {
            if ((this.RefreshFloatingMarkOperationCompleted == null)) {
                this.RefreshFloatingMarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshFloatingMarkOperationCompleted);
            }
            this.InvokeAsync("RefreshFloatingMark", new object[0], this.RefreshFloatingMarkOperationCompleted, userState);
        }
        
        private void OnRefreshFloatingMarkOperationCompleted(object arg) {
            if ((this.RefreshFloatingMarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshFloatingMarkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/RefreshSecurityStatus", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RefreshSecurityStatus() {
            this.Invoke("RefreshSecurityStatus", new object[0]);
        }
        
        /// <remarks/>
        public void RefreshSecurityStatusAsync() {
            this.RefreshSecurityStatusAsync(null);
        }
        
        /// <remarks/>
        public void RefreshSecurityStatusAsync(object userState) {
            if ((this.RefreshSecurityStatusOperationCompleted == null)) {
                this.RefreshSecurityStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshSecurityStatusOperationCompleted);
            }
            this.InvokeAsync("RefreshSecurityStatus", new object[0], this.RefreshSecurityStatusOperationCompleted, userState);
        }
        
        private void OnRefreshSecurityStatusOperationCompleted(object arg) {
            if ((this.RefreshSecurityStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshSecurityStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetProxySupportVersion", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetProxySupportVersion() {
            object[] results = this.Invoke("GetProxySupportVersion", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetProxySupportVersionAsync() {
            this.GetProxySupportVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetProxySupportVersionAsync(object userState) {
            if ((this.GetProxySupportVersionOperationCompleted == null)) {
                this.GetProxySupportVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProxySupportVersionOperationCompleted);
            }
            this.InvokeAsync("GetProxySupportVersion", new object[0], this.GetProxySupportVersionOperationCompleted, userState);
        }
        
        private void OnGetProxySupportVersionOperationCompleted(object arg) {
            if ((this.GetProxySupportVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProxySupportVersionCompleted(this, new GetProxySupportVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetProxySettings", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProxySettings GetProxySettings() {
            object[] results = this.Invoke("GetProxySettings", new object[0]);
            return ((ProxySettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetProxySettingsAsync() {
            this.GetProxySettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetProxySettingsAsync(object userState) {
            if ((this.GetProxySettingsOperationCompleted == null)) {
                this.GetProxySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProxySettingsOperationCompleted);
            }
            this.InvokeAsync("GetProxySettings", new object[0], this.GetProxySettingsOperationCompleted, userState);
        }
        
        private void OnGetProxySettingsOperationCompleted(object arg) {
            if ((this.GetProxySettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProxySettingsCompleted(this, new GetProxySettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/SetProxySettings", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetProxySettings(ProxySettings proxySettings) {
            this.Invoke("SetProxySettings", new object[] {
                        proxySettings});
        }
        
        /// <remarks/>
        public void SetProxySettingsAsync(ProxySettings proxySettings) {
            this.SetProxySettingsAsync(proxySettings, null);
        }
        
        /// <remarks/>
        public void SetProxySettingsAsync(ProxySettings proxySettings, object userState) {
            if ((this.SetProxySettingsOperationCompleted == null)) {
                this.SetProxySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetProxySettingsOperationCompleted);
            }
            this.InvokeAsync("SetProxySettings", new object[] {
                        proxySettings}, this.SetProxySettingsOperationCompleted, userState);
        }
        
        private void OnSetProxySettingsOperationCompleted(object arg) {
            if ((this.SetProxySettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetProxySettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetUserLanguage", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserLanguage(string autenticationToken) {
            object[] results = this.Invoke("GetUserLanguage", new object[] {
                        autenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLanguageAsync(string autenticationToken) {
            this.GetUserLanguageAsync(autenticationToken, null);
        }
        
        /// <remarks/>
        public void GetUserLanguageAsync(string autenticationToken, object userState) {
            if ((this.GetUserLanguageOperationCompleted == null)) {
                this.GetUserLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLanguageOperationCompleted);
            }
            this.InvokeAsync("GetUserLanguage", new object[] {
                        autenticationToken}, this.GetUserLanguageOperationCompleted, userState);
        }
        
        private void OnGetUserLanguageOperationCompleted(object arg) {
            if ((this.GetUserLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLanguageCompleted(this, new GetUserLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCompanyLanguage", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetCompanyLanguage(int companyID, out string cultureUI, out string culture) {
            object[] results = this.Invoke("GetCompanyLanguage", new object[] {
                        companyID});
            cultureUI = ((string)(results[1]));
            culture = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyLanguageAsync(int companyID) {
            this.GetCompanyLanguageAsync(companyID, null);
        }
        
        /// <remarks/>
        public void GetCompanyLanguageAsync(int companyID, object userState) {
            if ((this.GetCompanyLanguageOperationCompleted == null)) {
                this.GetCompanyLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyLanguageOperationCompleted);
            }
            this.InvokeAsync("GetCompanyLanguage", new object[] {
                        companyID}, this.GetCompanyLanguageOperationCompleted, userState);
        }
        
        private void OnGetCompanyLanguageOperationCompleted(object arg) {
            if ((this.GetCompanyLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyLanguageCompleted(this, new GetCompanyLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsValidUpToDateToken", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidUpToDateToken(string authenticationToken, string mluexpired) {
            object[] results = this.Invoke("IsValidUpToDateToken", new object[] {
                        authenticationToken,
                        mluexpired});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidUpToDateTokenAsync(string authenticationToken, string mluexpired) {
            this.IsValidUpToDateTokenAsync(authenticationToken, mluexpired, null);
        }
        
        /// <remarks/>
        public void IsValidUpToDateTokenAsync(string authenticationToken, string mluexpired, object userState) {
            if ((this.IsValidUpToDateTokenOperationCompleted == null)) {
                this.IsValidUpToDateTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidUpToDateTokenOperationCompleted);
            }
            this.InvokeAsync("IsValidUpToDateToken", new object[] {
                        authenticationToken,
                        mluexpired}, this.IsValidUpToDateTokenOperationCompleted, userState);
        }
        
        private void OnIsValidUpToDateTokenOperationCompleted(object arg) {
            if ((this.IsValidUpToDateTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidUpToDateTokenCompleted(this, new IsValidUpToDateTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/IsValidToken", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidToken(string authenticationToken) {
            object[] results = this.Invoke("IsValidToken", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidTokenAsync(string authenticationToken) {
            this.IsValidTokenAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void IsValidTokenAsync(string authenticationToken, object userState) {
            if ((this.IsValidTokenOperationCompleted == null)) {
                this.IsValidTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidTokenOperationCompleted);
            }
            this.InvokeAsync("IsValidToken", new object[] {
                        authenticationToken}, this.IsValidTokenOperationCompleted, userState);
        }
        
        private void OnIsValidTokenOperationCompleted(object arg) {
            if ((this.IsValidTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidTokenCompleted(this, new IsValidTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/ReloadUserArticleBindings", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReloadUserArticleBindings(string authenticationToken) {
            this.Invoke("ReloadUserArticleBindings", new object[] {
                        authenticationToken});
        }
        
        /// <remarks/>
        public void ReloadUserArticleBindingsAsync(string authenticationToken) {
            this.ReloadUserArticleBindingsAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void ReloadUserArticleBindingsAsync(string authenticationToken, object userState) {
            if ((this.ReloadUserArticleBindingsOperationCompleted == null)) {
                this.ReloadUserArticleBindingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReloadUserArticleBindingsOperationCompleted);
            }
            this.InvokeAsync("ReloadUserArticleBindings", new object[] {
                        authenticationToken}, this.ReloadUserArticleBindingsOperationCompleted, userState);
        }
        
        private void OnReloadUserArticleBindingsOperationCompleted(object arg) {
            if ((this.ReloadUserArticleBindingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReloadUserArticleBindingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/FEUsed", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FEUsed(string authenticationToken, bool val) {
            object[] results = this.Invoke("FEUsed", new object[] {
                        authenticationToken,
                        val});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FEUsedAsync(string authenticationToken, bool val) {
            this.FEUsedAsync(authenticationToken, val, null);
        }
        
        /// <remarks/>
        public void FEUsedAsync(string authenticationToken, bool val, object userState) {
            if ((this.FEUsedOperationCompleted == null)) {
                this.FEUsedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFEUsedOperationCompleted);
            }
            this.InvokeAsync("FEUsed", new object[] {
                        authenticationToken,
                        val}, this.FEUsedOperationCompleted, userState);
        }
        
        private void OnFEUsedOperationCompleted(object arg) {
            if ((this.FEUsedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FEUsedCompleted(this, new FEUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/Sbrill", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Sbrill(string token) {
            object[] results = this.Invoke("Sbrill", new object[] {
                        token});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SbrillAsync(string token) {
            this.SbrillAsync(token, null);
        }
        
        /// <remarks/>
        public void SbrillAsync(string token, object userState) {
            if ((this.SbrillOperationCompleted == null)) {
                this.SbrillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSbrillOperationCompleted);
            }
            this.InvokeAsync("Sbrill", new object[] {
                        token}, this.SbrillOperationCompleted, userState);
        }
        
        private void OnSbrillOperationCompleted(object arg) {
            if ((this.SbrillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SbrillCompleted(this, new SbrillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/LoginManager/GetCalType", RequestNamespace="http://microarea.it/LoginManager/", ResponseNamespace="http://microarea.it/LoginManager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LoginSlotType GetCalType(string token) {
            object[] results = this.Invoke("GetCalType", new object[] {
                        token});
            return ((LoginSlotType)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalTypeAsync(string token) {
            this.GetCalTypeAsync(token, null);
        }
        
        /// <remarks/>
        public void GetCalTypeAsync(string token, object userState) {
            if ((this.GetCalTypeOperationCompleted == null)) {
                this.GetCalTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalTypeOperationCompleted);
            }
            this.InvokeAsync("GetCalType", new object[] {
                        token}, this.GetCalTypeOperationCompleted, userState);
        }
        
        private void OnGetCalTypeOperationCompleted(object arg) {
            if ((this.GetCalTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalTypeCompleted(this, new GetCalTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class Advertisement {
        
        private int autoClosingTimeField;
        
        private string idField;
        
        private bool hideDisclaimerField;
        
        private bool expireWithRestartField;
        
        private bool historicizeField;
        
        private bool immediateField;
        
        private System.DateTime expiryDateField;
        
        private MessageType typeField;
        
        private string tagField;
        
        private int severityField;
        
        private string[] recipientsField;
        
        private AdvertisementBody bodyTypedField;
        
        private System.DateTime creationDateField;
        
        private MessageSensation sensationField;
        
        /// <remarks/>
        public int AutoClosingTime {
            get {
                return this.autoClosingTimeField;
            }
            set {
                this.autoClosingTimeField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool HideDisclaimer {
            get {
                return this.hideDisclaimerField;
            }
            set {
                this.hideDisclaimerField = value;
            }
        }
        
        /// <remarks/>
        public bool ExpireWithRestart {
            get {
                return this.expireWithRestartField;
            }
            set {
                this.expireWithRestartField = value;
            }
        }
        
        /// <remarks/>
        public bool Historicize {
            get {
                return this.historicizeField;
            }
            set {
                this.historicizeField = value;
            }
        }
        
        /// <remarks/>
        public bool Immediate {
            get {
                return this.immediateField;
            }
            set {
                this.immediateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                this.expiryDateField = value;
            }
        }
        
        /// <remarks/>
        public MessageType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string[] Recipients {
            get {
                return this.recipientsField;
            }
            set {
                this.recipientsField = value;
            }
        }
        
        /// <remarks/>
        public AdvertisementBody BodyTyped {
            get {
                return this.bodyTypedField;
            }
            set {
                this.bodyTypedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public MessageSensation Sensation {
            get {
                return this.sensationField;
            }
            set {
                this.sensationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum MessageType {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Contract = 2,
        
        /// <remarks/>
        Advrtsm = 4,
        
        /// <remarks/>
        Updates = 8,
        
        /// <remarks/>
        PostaLite = 16,
        
        /// <remarks/>
        Default = 32,
        
        /// <remarks/>
        DataSynch = 64,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class AdvertisementBody {
        
        private string textField;
        
        private string linkField;
        
        private string htmlField;
        
        private LocalizationBag localizationBagTypedField;
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string Link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
        
        /// <remarks/>
        public string Html {
            get {
                return this.htmlField;
            }
            set {
                this.htmlField = value;
            }
        }
        
        /// <remarks/>
        public LocalizationBag LocalizationBagTyped {
            get {
                return this.localizationBagTypedField;
            }
            set {
                this.localizationBagTypedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class LocalizationBag {
        
        private string keyField;
        
        private string productNameField;
        
        private string userEmailField;
        
        private string daysField;
        
        private long renewalPeriodTicksField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserEmail {
            get {
                return this.userEmailField;
            }
            set {
                this.userEmailField = value;
            }
        }
        
        /// <remarks/>
        public string Days {
            get {
                return this.daysField;
            }
            set {
                this.daysField = value;
            }
        }
        
        /// <remarks/>
        public long RenewalPeriodTicks {
            get {
                return this.renewalPeriodTicksField;
            }
            set {
                this.renewalPeriodTicksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class FirewallCredentialsSettings {
        
        private bool needsCredentialsField;
        
        private string domainField;
        
        private string nameField;
        
        private string passwordField;
        
        /// <remarks/>
        public bool NeedsCredentials {
            get {
                return this.needsCredentialsField;
            }
            set {
                this.needsCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public string Domain {
            get {
                return this.domainField;
            }
            set {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ProxyAddress {
        
        private string serverField;
        
        private int portField;
        
        /// <remarks/>
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProxySettings))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public abstract partial class State {
        
        private string verField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ver {
            get {
                return this.verField;
            }
            set {
                this.verField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ProxySettings : State {
        
        private ProxyAddress httpProxyField;
        
        private ProxyAddress ftpProxyField;
        
        private FirewallCredentialsSettings firewallCredentialsSettingsField;
        
        /// <remarks/>
        public ProxyAddress HttpProxy {
            get {
                return this.httpProxyField;
            }
            set {
                this.httpProxyField = value;
            }
        }
        
        /// <remarks/>
        public ProxyAddress FtpProxy {
            get {
                return this.ftpProxyField;
            }
            set {
                this.ftpProxyField = value;
            }
        }
        
        /// <remarks/>
        public FirewallCredentialsSettings FirewallCredentialsSettings {
            get {
                return this.firewallCredentialsSettingsField;
            }
            set {
                this.firewallCredentialsSettingsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ModuleNameInfo {
        
        private string nameField;
        
        private string localizedNameField;
        
        private int cALField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string LocalizedName {
            get {
                return this.localizedNameField;
            }
            set {
                this.localizedNameField = value;
            }
        }
        
        /// <remarks/>
        public int CAL {
            get {
                return this.cALField;
            }
            set {
                this.cALField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class TbSenderDatabaseInfo {
        
        private string connectionStringField;
        
        private int companyIdField;
        
        private string usernameField;
        
        private string passwordField;
        
        private string serverNameField;
        
        private string databaseNameField;
        
        private bool winAuthenticationField;
        
        private string companyField;
        
        private bool isEnabledField;
        
        private string companyCultureField;
        
        private string companyCultureUIField;
        
        /// <remarks/>
        public string ConnectionString {
            get {
                return this.connectionStringField;
            }
            set {
                this.connectionStringField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string ServerName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        public string DatabaseName {
            get {
                return this.databaseNameField;
            }
            set {
                this.databaseNameField = value;
            }
        }
        
        /// <remarks/>
        public bool WinAuthentication {
            get {
                return this.winAuthenticationField;
            }
            set {
                this.winAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEnabled {
            get {
                return this.isEnabledField;
            }
            set {
                this.isEnabledField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyCulture {
            get {
                return this.companyCultureField;
            }
            set {
                this.companyCultureField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyCultureUI {
            get {
                return this.companyCultureUIField;
            }
            set {
                this.companyCultureUIField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public abstract partial class IBaseSynchroProvider {
        
        private bool isProviderValidField;
        
        private string companyNameField;
        
        private bool isValidationEnabledField;
        
        private bool isInPauseField;
        
        private bool abortField;
        
        /// <remarks/>
        public bool IsProviderValid {
            get {
                return this.isProviderValidField;
            }
            set {
                this.isProviderValidField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsValidationEnabled {
            get {
                return this.isValidationEnabledField;
            }
            set {
                this.isValidationEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool IsInPause {
            get {
                return this.isInPauseField;
            }
            set {
                this.isInPauseField = value;
            }
        }
        
        /// <remarks/>
        public bool Abort {
            get {
                return this.abortField;
            }
            set {
                this.abortField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class DataSynchroDatabaseInfo {
        
        private string companyConnectionStringField;
        
        private DBMSType companyDBMSTypeField;
        
        private string serverField;
        
        private string databaseField;
        
        private string userField;
        
        private string passwordField;
        
        private bool winAuthenticationField;
        
        private string companyNameField;
        
        private int companyIdField;
        
        private string loginNameField;
        
        private string loginPasswordField;
        
        private bool loginWindowsAuthenticationField;
        
        private int loginIdField;
        
        private bool useDBSlaveField;
        
        private string dmsConnectionStringField;
        
        private IBaseSynchroProvider[] synchroProvidersField;
        
        /// <remarks/>
        public string CompanyConnectionString {
            get {
                return this.companyConnectionStringField;
            }
            set {
                this.companyConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        public DBMSType CompanyDBMSType {
            get {
                return this.companyDBMSTypeField;
            }
            set {
                this.companyDBMSTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public string Database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public bool WinAuthentication {
            get {
                return this.winAuthenticationField;
            }
            set {
                this.winAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        public string LoginName {
            get {
                return this.loginNameField;
            }
            set {
                this.loginNameField = value;
            }
        }
        
        /// <remarks/>
        public string LoginPassword {
            get {
                return this.loginPasswordField;
            }
            set {
                this.loginPasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool LoginWindowsAuthentication {
            get {
                return this.loginWindowsAuthenticationField;
            }
            set {
                this.loginWindowsAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public int LoginId {
            get {
                return this.loginIdField;
            }
            set {
                this.loginIdField = value;
            }
        }
        
        /// <remarks/>
        public bool UseDBSlave {
            get {
                return this.useDBSlaveField;
            }
            set {
                this.useDBSlaveField = value;
            }
        }
        
        /// <remarks/>
        public string DmsConnectionString {
            get {
                return this.dmsConnectionStringField;
            }
            set {
                this.dmsConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        public IBaseSynchroProvider[] SynchroProviders {
            get {
                return this.synchroProvidersField;
            }
            set {
                this.synchroProvidersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum DBMSType {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        SQLSERVER,
        
        /// <remarks/>
        ORACLE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class DmsDatabaseInfo {
        
        private string companyConnectionStringField;
        
        private DBMSType companyDBMSTypeField;
        
        private string dMSConnectionStringField;
        
        private string serverField;
        
        private string databaseField;
        
        private string companyField;
        
        private int companyIdField;
        
        private int lCIDField;
        
        private bool isFTSEnabledField;
        
        private bool useFTSField;
        
        private bool isAlreadyAnalyzedField;
        
        private string extensionTypeCollateField;
        
        private string fulltextDocumentTypesCollateField;
        
        private bool isSOSActivatedField;
        
        private System.DateTime lastSOSUpdateDateTimeField;
        
        /// <remarks/>
        public string CompanyConnectionString {
            get {
                return this.companyConnectionStringField;
            }
            set {
                this.companyConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        public DBMSType CompanyDBMSType {
            get {
                return this.companyDBMSTypeField;
            }
            set {
                this.companyDBMSTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DMSConnectionString {
            get {
                return this.dMSConnectionStringField;
            }
            set {
                this.dMSConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public string Database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        public int LCID {
            get {
                return this.lCIDField;
            }
            set {
                this.lCIDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFTSEnabled {
            get {
                return this.isFTSEnabledField;
            }
            set {
                this.isFTSEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool UseFTS {
            get {
                return this.useFTSField;
            }
            set {
                this.useFTSField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAlreadyAnalyzed {
            get {
                return this.isAlreadyAnalyzedField;
            }
            set {
                this.isAlreadyAnalyzedField = value;
            }
        }
        
        /// <remarks/>
        public string ExtensionTypeCollate {
            get {
                return this.extensionTypeCollateField;
            }
            set {
                this.extensionTypeCollateField = value;
            }
        }
        
        /// <remarks/>
        public string FulltextDocumentTypesCollate {
            get {
                return this.fulltextDocumentTypesCollateField;
            }
            set {
                this.fulltextDocumentTypesCollateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSOSActivated {
            get {
                return this.isSOSActivatedField;
            }
            set {
                this.isSOSActivatedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastSOSUpdateDateTime {
            get {
                return this.lastSOSUpdateDateTimeField;
            }
            set {
                this.lastSOSUpdateDateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ClientData {
        
        private string nameField;
        
        private string cPUField;
        
        private string resolutionsField;
        
        private string ramTypeField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string CPU {
            get {
                return this.cPUField;
            }
            set {
                this.cPUField = value;
            }
        }
        
        /// <remarks/>
        public string Resolutions {
            get {
                return this.resolutionsField;
            }
            set {
                this.resolutionsField = value;
            }
        }
        
        /// <remarks/>
        public string RamType {
            get {
                return this.ramTypeField;
            }
            set {
                this.ramTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum MessageSensation {
        
        /// <remarks/>
        Information,
        
        /// <remarks/>
        ResultGreen,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        AccessDenied,
        
        /// <remarks/>
        Help,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum DBNetworkType {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        Large,
        
        /// <remarks/>
        Small,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum GrantType {
        
        /// <remarks/>
        Execute,
        
        /// <remarks/>
        Edit,
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Browse,
        
        /// <remarks/>
        CustomizeForm,
        
        /// <remarks/>
        EditQuery,
        
        /// <remarks/>
        Import,
        
        /// <remarks/>
        Export,
        
        /// <remarks/>
        SilentMode,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum SerialNumberType {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Development,
        
        /// <remarks/>
        Reseller,
        
        /// <remarks/>
        Distributor,
        
        /// <remarks/>
        Demo,
        
        /// <remarks/>
        DevelopmentIU,
        
        /// <remarks/>
        Multi,
        
        /// <remarks/>
        StandAlone,
        
        /// <remarks/>
        Backup,
        
        /// <remarks/>
        Test,
        
        /// <remarks/>
        PersonalPlusK,
        
        /// <remarks/>
        DevelopmentPlusK,
        
        /// <remarks/>
        DevelopmentPlusUser,
        
        /// <remarks/>
        PersonalPlusUser,
        
        /// <remarks/>
        UNDEFINED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum ActivationState {
        
        /// <remarks/>
        Demo,
        
        /// <remarks/>
        DemoWarning,
        
        /// <remarks/>
        SilentWarning,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Activated,
        
        /// <remarks/>
        NoActivated,
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Undefined,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum LoginSlotType {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Gdi,
        
        /// <remarks/>
        MagicDocument,
        
        /// <remarks/>
        EasyLook,
        
        /// <remarks/>
        ThirdPart,
        
        /// <remarks/>
        Mobile,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsUserLoggedByNameCompletedEventHandler(object sender, IsUserLoggedByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserLoggedByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserLoggedByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsUserLoggedCompletedEventHandler(object sender, IsUserLoggedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserLoggedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserLoggedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsSecurityLightEnabledCompletedEventHandler(object sender, IsSecurityLightEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSecurityLightEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSecurityLightEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsSecurityLightAccessAllowedCompletedEventHandler(object sender, IsSecurityLightAccessAllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSecurityLightAccessAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSecurityLightAccessAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDBCultureLCIDCompletedEventHandler(object sender, GetDBCultureLCIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBCultureLCIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBCultureLCIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetMessageReadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetImmediateMessagesQueueCompletedEventHandler(object sender, GetImmediateMessagesQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImmediateMessagesQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImmediateMessagesQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Advertisement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Advertisement[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetMessagesQueueCompletedEventHandler(object sender, GetMessagesQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Advertisement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Advertisement[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetOldMessagesCompletedEventHandler(object sender, GetOldMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOldMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOldMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Advertisement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Advertisement[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteMessageFromQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void PurgeMessageByTagCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SendAccessMailCompletedEventHandler(object sender, SendAccessMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAccessMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAccessMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetAspNetUserCompletedEventHandler(object sender, GetAspNetUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAspNetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAspNetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetConfigurationHashCompletedEventHandler(object sender, GetConfigurationHashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UserCanAccessWebSitePrivateAreaCompletedEventHandler(object sender, UserCanAccessWebSitePrivateAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserCanAccessWebSitePrivateAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserCanAccessWebSitePrivateAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsEasyBuilderDeveloperCompletedEventHandler(object sender, IsEasyBuilderDeveloperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsEasyBuilderDeveloperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsEasyBuilderDeveloperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SendErrorFileCompletedEventHandler(object sender, SendErrorFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendErrorFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendErrorFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DownloadPdbCompletedEventHandler(object sender, DownloadPdbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadPdbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadPdbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetMainSerialNumberCompletedEventHandler(object sender, GetMainSerialNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMainSerialNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMainSerialNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetServiceJsonCompletedEventHandler(object sender, GetServiceJsonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceJsonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceJsonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetMLUExpiryDateCompletedEventHandler(object sender, GetMLUExpiryDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMLUExpiryDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMLUExpiryDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SendBalloonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void AdvancedSendBalloonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void AdvancedSendTaggedBalloonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetChannelFreeCompletedEventHandler(object sender, SetChannelFreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetChannelFreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetChannelFreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetChannelFreeCompletedEventHandler(object sender, GetChannelFreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChannelFreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChannelFreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void M4PKStatusCompletedEventHandler(object sender, M4PKStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class M4PKStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal M4PKStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetEditionTypeCompletedEventHandler(object sender, GetEditionTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEditionTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEditionTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetTokensByProcessNameCompletedEventHandler(object sender, GetTokensByProcessNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokensByProcessNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokensByProcessNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginRegistrationTestCompletedEventHandler(object sender, LoginRegistrationTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginRegistrationTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginRegistrationTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginRegistrationCompletedEventHandler(object sender, LoginRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string authenticationToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginForTestCompletedEventHandler(object sender, LoginForTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginForTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginForTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginForCompletedEventHandler(object sender, LoginForCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginForCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginForCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string authenticationToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InitCompletedEventHandler(object sender, InitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void VerifyDBSizeCompletedEventHandler(object sender, VerifyDBSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyDBSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyDBSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetMobileTokenCompletedEventHandler(object sender, GetMobileTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMobileTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMobileTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void RefreshWMSSlotCompletedEventHandler(object sender, RefreshWMSSlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefreshWMSSlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefreshWMSSlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsCalAvailableCompletedEventHandler(object sender, IsCalAvailableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCalAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCalAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsValidDateCompletedEventHandler(object sender, IsValidDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string maxDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void PingNeededCompletedEventHandler(object sender, PingNeededCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingNeededCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingNeededCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetClientDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetCompanyInfoCompletedEventHandler(object sender, SetCompanyInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCompanyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCompanyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsActivatedCompletedEventHandler(object sender, IsActivatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsActivatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsActivatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsSynchActivationCompletedEventHandler(object sender, IsSynchActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSynchActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSynchActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetModulesCompletedEventHandler(object sender, GetModulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCompanyUsersCompletedEventHandler(object sender, GetCompanyUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetNonNTCompanyUsersCompletedEventHandler(object sender, GetNonNTCompanyUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNonNTCompanyUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNonNTCompanyUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCompanyRolesCompletedEventHandler(object sender, GetCompanyRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsESPLoginCompletedEventHandler(object sender, IsESPLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsESPLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsESPLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsServiceAccessCompletedEventHandler(object sender, IsServiceAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsServiceAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsServiceAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void HasUserEBRolesCompletedEventHandler(object sender, HasUserEBRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasUserEBRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasUserEBRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserRolesCompletedEventHandler(object sender, GetUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void EnumAllUsersCompletedEventHandler(object sender, EnumAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void EnumAllCompanyUsersCompletedEventHandler(object sender, EnumAllCompanyUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumAllCompanyUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumAllCompanyUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetRoleUsersCompletedEventHandler(object sender, GetRoleUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void EnumCompaniesCompletedEventHandler(object sender, EnumCompaniesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsIntegratedSecurityUserCompletedEventHandler(object sender, IsIntegratedSecurityUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsIntegratedSecurityUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsIntegratedSecurityUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetLoggedUsersNumberCompletedEventHandler(object sender, GetLoggedUsersNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoggedUsersNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoggedUsersNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCompanyLoggedUsersNumberCompletedEventHandler(object sender, GetCompanyLoggedUsersNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyLoggedUsersNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyLoggedUsersNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetLoggedUsersCompletedEventHandler(object sender, GetLoggedUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoggedUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoggedUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetLoggedUsersAdvancedCompletedEventHandler(object sender, GetLoggedUsersAdvancedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoggedUsersAdvancedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoggedUsersAdvancedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCalNumberByTypeCompletedEventHandler(object sender, GetCalNumberByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalNumberByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalNumberByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCalNumberCompletedEventHandler(object sender, GetCalNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int gdiConcurrent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int unnamedCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int officeCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int tpCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCalNumber2CompletedEventHandler(object sender, GetCalNumber2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalNumber2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalNumber2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int gdiConcurrent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int unnamedCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int officeCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int tpCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int wmsCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int manufacturingCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCalNumber3CompletedEventHandler(object sender, GetCalNumber3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalNumber3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalNumber3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int gdiConcurrent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int unnamedCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int officeCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int tpCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int wmsCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int manufacturingCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public int instoreCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCalNumber4CompletedEventHandler(object sender, GetCalNumber4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalNumber4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalNumber4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int gdiConcurrent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int unnamedCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int officeCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int tpCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int wmsCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int manufacturingCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public int instoreCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public int stockmoveCal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetTokenProcessTypeCompletedEventHandler(object sender, GetTokenProcessTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenProcessTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenProcessTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ReloadConfigurationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ReloadServerConnectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ValidateUserCompletedEventHandler(object sender, ValidateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] userCompanies {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int loginId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePassword {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool userMustChangePassword {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public System.DateTime expiredDatePassword {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool passwordNeverExpired {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public bool expiredDateCannotChange {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ConsumeMobileCalCompletedEventHandler(object sender, ConsumeMobileCalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsumeMobileCalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsumeMobileCalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ConsumeInStoreCalCompletedEventHandler(object sender, ConsumeInStoreCalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsumeInStoreCalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsumeInStoreCalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ConsumeStockMoveCalCompletedEventHandler(object sender, ConsumeStockMoveCalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsumeStockMoveCalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsumeStockMoveCalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginCompactCompletedEventHandler(object sender, LoginCompactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string authenticationToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginCompactOnlyCheckCompletedEventHandler(object sender, LoginCompactOnlyCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompactOnlyCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompactOnlyCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string authenticationToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SSOLogOffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginViaInfinityToken2CompletedEventHandler(object sender, LoginViaInfinityToken2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginViaInfinityToken2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginViaInfinityToken2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string authenticationToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetITokenCompletedEventHandler(object sender, GetITokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetPATTokenCompletedEventHandler(object sender, GetPATTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPATTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPATTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetServiceUserPasswordExpirationCompletedEventHandler(object sender, GetServiceUserPasswordExpirationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceUserPasswordExpirationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceUserPasswordExpirationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ExistsSSOIDUserCompletedEventHandler(object sender, ExistsSSOIDUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExistsSSOIDUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExistsSSOIDUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginCheckCompletedEventHandler(object sender, LoginCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool admin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string authenticationToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int companyId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string dbName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string dbServer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public int providerId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public bool security {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public bool auditing {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public bool useKeyedUpdate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public bool transactionUse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string preferredLanguage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string applicationLanguage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string providerName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string providerDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public bool useConstParameter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public bool stripTrailingSpaces {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public string providerCompanyConnectionString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public string nonProviderCompanyConnectionString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public string dbUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public string activationDB {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[22]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void Login2CompletedEventHandler(object sender, Login2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Login2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Login2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool admin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string authenticationToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int companyId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string dbName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string dbServer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public int providerId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public bool security {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public bool auditing {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public bool useKeyedUpdate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public bool transactionUse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string preferredLanguage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string applicationLanguage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string providerName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string providerDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public bool useConstParameter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public bool stripTrailingSpaces {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public string providerCompanyConnectionString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public string nonProviderCompanyConnectionString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public string dbUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public string activationDB {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[22]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ConfirmTokenCompletedEventHandler(object sender, ConfirmTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetLoginInformationCompletedEventHandler(object sender, GetLoginInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int loginId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int companyId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool admin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string dbName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string dbServer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public int providerId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public bool security {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public bool auditing {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public bool useKeyedUpdate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public bool transactionUse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public bool useUnicode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string preferredLanguage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string applicationLanguage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string providerName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public string providerDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public bool useConstParameter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public bool stripTrailingSpaces {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public string providerCompanyConnectionString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public string nonProviderCompanyConnectionString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public string dbUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[22]));
            }
        }
        
        /// <remarks/>
        public string processName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[23]));
            }
        }
        
        /// <remarks/>
        public string userDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[24]));
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[25]));
            }
        }
        
        /// <remarks/>
        public bool easyBuilderDeveloper {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[26]));
            }
        }
        
        /// <remarks/>
        public bool rowSecurity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[27]));
            }
        }
        
        /// <remarks/>
        public bool dataSynchro {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[28]));
            }
        }
        
        /// <remarks/>
        public bool cgm {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[29]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LogOffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserNameCompletedEventHandler(object sender, GetUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserDescriptionByIdCompletedEventHandler(object sender, GetUserDescriptionByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDescriptionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDescriptionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserDescriptionByNameCompletedEventHandler(object sender, GetUserDescriptionByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDescriptionByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDescriptionByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserEMailByNameCompletedEventHandler(object sender, GetUserEMailByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserEMailByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserEMailByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsFloatingUserCompletedEventHandler(object sender, IsFloatingUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFloatingUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFloatingUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool floating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsWebUserCompletedEventHandler(object sender, IsWebUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsWebUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsWebUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool web {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsWinNTCompletedEventHandler(object sender, IsWinNTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsWinNTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsWinNTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDbOwnerCompletedEventHandler(object sender, GetDbOwnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDbOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDbOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsCompanySecuredCompletedEventHandler(object sender, IsCompanySecuredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCompanySecuredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCompanySecuredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetAuthenticationInformationsCompletedEventHandler(object sender, GetAuthenticationInformationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthenticationInformationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthenticationInformationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int loginId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int companyId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool webLogin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetAuthenticationNamesCompletedEventHandler(object sender, GetAuthenticationNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthenticationNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthenticationNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteAssociationCompletedEventHandler(object sender, DeleteAssociationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAssociationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAssociationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteCompanyCompletedEventHandler(object sender, DeleteCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetSystemDBConnectionStringCompletedEventHandler(object sender, GetSystemDBConnectionStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemDBConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemDBConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDMSConnectionStringCompletedEventHandler(object sender, GetDMSConnectionStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDMSConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDMSConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void Sql2012AllowedCompletedEventHandler(object sender, Sql2012AllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Sql2012AllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Sql2012AllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetDefaultSchemaCompletedEventHandler(object sender, SetDefaultSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string d {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string c {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int p {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDMSDatabasesInfoCompletedEventHandler(object sender, GetDMSDatabasesInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDMSDatabasesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDMSDatabasesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DmsDatabaseInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DmsDatabaseInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDataSynchroDatabasesInfoCompletedEventHandler(object sender, GetDataSynchroDatabasesInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSynchroDatabasesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSynchroDatabasesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSynchroDatabaseInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSynchroDatabaseInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCompanyDatabasesInfoCompletedEventHandler(object sender, GetCompanyDatabasesInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyDatabasesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyDatabasesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TbSenderDatabaseInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TbSenderDatabaseInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetEditionCompletedEventHandler(object sender, GetEditionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetConfigurationStreamCompletedEventHandler(object sender, GetConfigurationStreamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCountryCompletedEventHandler(object sender, GetCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetProviderNameFromCompanyIdCompletedEventHandler(object sender, GetProviderNameFromCompanyIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProviderNameFromCompanyIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProviderNameFromCompanyIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetInstallationVersionCompletedEventHandler(object sender, GetInstallationVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstallationVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstallationVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string productName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime buildDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public System.DateTime instDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int build {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserInfoIDCompletedEventHandler(object sender, GetUserInfoIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void TraceActionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void HasUserAlreadyChangedPasswordTodayCompletedEventHandler(object sender, HasUserAlreadyChangedPasswordTodayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasUserAlreadyChangedPasswordTodayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasUserAlreadyChangedPasswordTodayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetBrandedApplicationTitleCompletedEventHandler(object sender, GetBrandedApplicationTitleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrandedApplicationTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrandedApplicationTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetMasterProductBrandedNameCompletedEventHandler(object sender, GetMasterProductBrandedNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterProductBrandedNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterProductBrandedNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetMasterSolutionBrandedNameCompletedEventHandler(object sender, GetMasterSolutionBrandedNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterSolutionBrandedNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterSolutionBrandedNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetMasterSolutionCompletedEventHandler(object sender, GetMasterSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetBrandedProducerNameCompletedEventHandler(object sender, GetBrandedProducerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrandedProducerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrandedProducerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetBrandedProductTitleCompletedEventHandler(object sender, GetBrandedProductTitleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrandedProductTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrandedProductTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetBrandedKeyCompletedEventHandler(object sender, GetBrandedKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrandedKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrandedKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDBNetworkTypeCompletedEventHandler(object sender, GetDBNetworkTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBNetworkTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBNetworkTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DBNetworkType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBNetworkType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDatabaseTypeCompletedEventHandler(object sender, GetDatabaseTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDatabaseTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDatabaseTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CanUseNamespaceCompletedEventHandler(object sender, CanUseNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanUseNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanUseNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CacheCounterCompletedEventHandler(object sender, CacheCounterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CacheCounterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CacheCounterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CacheCounterGTGCompletedEventHandler(object sender, CacheCounterGTGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CacheCounterGTGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CacheCounterGTGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SerialNumberType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SerialNumberType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetCurrentComponentsCompletedEventHandler(object sender, SetCurrentComponentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCurrentComponentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCurrentComponentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActivationState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActivationState)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int dte {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsVirginActivationCompletedEventHandler(object sender, IsVirginActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsVirginActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsVirginActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void HDCompletedEventHandler(object sender, HDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void StoreMLUChoiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SaveLicensedCompletedEventHandler(object sender, SaveLicensedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveLicensedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveLicensedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ValidateITokenCompletedEventHandler(object sender, ValidateITokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateITokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateITokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SaveUserInfoCompletedEventHandler(object sender, SaveUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteUserInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteLicensedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void PrePingCompletedEventHandler(object sender, PrePingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrePingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrePingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetArticlesWithNamedCalCompletedEventHandler(object sender, GetArticlesWithNamedCalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArticlesWithNamedCalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArticlesWithNamedCalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ModuleNameInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ModuleNameInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetArticlesWithFloatingCalCompletedEventHandler(object sender, GetArticlesWithFloatingCalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArticlesWithFloatingCalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArticlesWithFloatingCalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ModuleNameInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ModuleNameInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void RefreshFloatingMarkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void RefreshSecurityStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetProxySupportVersionCompletedEventHandler(object sender, GetProxySupportVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProxySupportVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProxySupportVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetProxySettingsCompletedEventHandler(object sender, GetProxySettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProxySettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProxySettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProxySettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProxySettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetProxySettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUserLanguageCompletedEventHandler(object sender, GetUserLanguageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCompanyLanguageCompletedEventHandler(object sender, GetCompanyLanguageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string cultureUI {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string culture {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsValidUpToDateTokenCompletedEventHandler(object sender, IsValidUpToDateTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidUpToDateTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidUpToDateTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsValidTokenCompletedEventHandler(object sender, IsValidTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ReloadUserArticleBindingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void FEUsedCompletedEventHandler(object sender, FEUsedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FEUsedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FEUsedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SbrillCompletedEventHandler(object sender, SbrillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SbrillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SbrillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCalTypeCompletedEventHandler(object sender, GetCalTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LoginSlotType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginSlotType)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
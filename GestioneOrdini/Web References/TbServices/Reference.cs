//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Il codice sorgente è stato generato automaticamente da Microsoft.VSDesigner, versione 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace GestioneOrdini.TbServices {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TbServicesSoap", Namespace="http://microarea.it/TbServices/")]
    public partial class TbServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InitOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseTBOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTBOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTBExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTBTaggedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTBTaggedExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWCFBindingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseTBOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTbLoaderInstantiatedListXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsTbLoaderInstantiatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback KillThreadOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopThreadOperationCompleted;
        
        private System.Threading.SendOrPostCallback KillProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback KillTaggedProcessesOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForceApplicationDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDataTaggedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataTaggedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExistDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback XmlGetParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback XmlGetParametersTaggedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXMLHotLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXMLEnumOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnumsXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXMLHotLinkDefOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCachedFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilePathFromNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileStreamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileStreamByFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiagnosticItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerPrinterNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstalledCulturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResolvePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResolvePathIMSOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TbServices() {
            this.Url = global::GestioneOrdini.Properties.Settings.Default.GestioneOrdini_TbServices_TbServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InitCompletedEventHandler InitCompleted;
        
        /// <remarks/>
        public event CloseTBCompletedEventHandler CloseTBCompleted;
        
        /// <remarks/>
        public event CreateTBCompletedEventHandler CreateTBCompleted;
        
        /// <remarks/>
        public event CreateTBExCompletedEventHandler CreateTBExCompleted;
        
        /// <remarks/>
        public event CreateTBTaggedCompletedEventHandler CreateTBTaggedCompleted;
        
        /// <remarks/>
        public event CreateTBTaggedExCompletedEventHandler CreateTBTaggedExCompleted;
        
        /// <remarks/>
        public event GetWCFBindingCompletedEventHandler GetWCFBindingCompleted;
        
        /// <remarks/>
        public event ReleaseTBCompletedEventHandler ReleaseTBCompleted;
        
        /// <remarks/>
        public event GetTbLoaderInstantiatedListXMLCompletedEventHandler GetTbLoaderInstantiatedListXMLCompleted;
        
        /// <remarks/>
        public event IsTbLoaderInstantiatedCompletedEventHandler IsTbLoaderInstantiatedCompleted;
        
        /// <remarks/>
        public event KillThreadCompletedEventHandler KillThreadCompleted;
        
        /// <remarks/>
        public event StopThreadCompletedEventHandler StopThreadCompleted;
        
        /// <remarks/>
        public event KillProcessCompletedEventHandler KillProcessCompleted;
        
        /// <remarks/>
        public event KillTaggedProcessesCompletedEventHandler KillTaggedProcessesCompleted;
        
        /// <remarks/>
        public event StopProcessCompletedEventHandler StopProcessCompleted;
        
        /// <remarks/>
        public event SetForceApplicationDateCompletedEventHandler SetForceApplicationDateCompleted;
        
        /// <remarks/>
        public event SetDataCompletedEventHandler SetDataCompleted;
        
        /// <remarks/>
        public event SetDataTaggedCompletedEventHandler SetDataTaggedCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetDataTaggedCompletedEventHandler GetDataTaggedCompleted;
        
        /// <remarks/>
        public event ExistDataCompletedEventHandler ExistDataCompleted;
        
        /// <remarks/>
        public event XmlGetParametersCompletedEventHandler XmlGetParametersCompleted;
        
        /// <remarks/>
        public event XmlGetParametersTaggedCompletedEventHandler XmlGetParametersTaggedCompleted;
        
        /// <remarks/>
        public event GetXMLHotLinkCompletedEventHandler GetXMLHotLinkCompleted;
        
        /// <remarks/>
        public event GetDocumentSchemaCompletedEventHandler GetDocumentSchemaCompleted;
        
        /// <remarks/>
        public event GetReportSchemaCompletedEventHandler GetReportSchemaCompleted;
        
        /// <remarks/>
        public event GetXMLEnumCompletedEventHandler GetXMLEnumCompleted;
        
        /// <remarks/>
        public event GetEnumsXmlCompletedEventHandler GetEnumsXmlCompleted;
        
        /// <remarks/>
        public event GetXMLHotLinkDefCompletedEventHandler GetXMLHotLinkDefCompleted;
        
        /// <remarks/>
        public event RunFunctionCompletedEventHandler RunFunctionCompleted;
        
        /// <remarks/>
        public event GetCachedFileCompletedEventHandler GetCachedFileCompleted;
        
        /// <remarks/>
        public event GetFilePathFromNamespaceCompletedEventHandler GetFilePathFromNamespaceCompleted;
        
        /// <remarks/>
        public event GetFileStreamCompletedEventHandler GetFileStreamCompleted;
        
        /// <remarks/>
        public event GetFileStreamByFileNameCompletedEventHandler GetFileStreamByFileNameCompleted;
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        public event GetDiagnosticItemsCompletedEventHandler GetDiagnosticItemsCompleted;
        
        /// <remarks/>
        public event GetServerPrinterNamesCompletedEventHandler GetServerPrinterNamesCompleted;
        
        /// <remarks/>
        public event GetInstalledCulturesCompletedEventHandler GetInstalledCulturesCompleted;
        
        /// <remarks/>
        public event ResolvePathCompletedEventHandler ResolvePathCompleted;
        
        /// <remarks/>
        public event ResolvePathIMSCompletedEventHandler ResolvePathIMSCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/Init", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Init() {
            this.Invoke("Init", new object[0]);
        }
        
        /// <remarks/>
        public void InitAsync() {
            this.InitAsync(null);
        }
        
        /// <remarks/>
        public void InitAsync(object userState) {
            if ((this.InitOperationCompleted == null)) {
                this.InitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitOperationCompleted);
            }
            this.InvokeAsync("Init", new object[0], this.InitOperationCompleted, userState);
        }
        
        private void OnInitOperationCompleted(object arg) {
            if ((this.InitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/CloseTB", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseTB(string authenticationToken) {
            this.Invoke("CloseTB", new object[] {
                        authenticationToken});
        }
        
        /// <remarks/>
        public void CloseTBAsync(string authenticationToken) {
            this.CloseTBAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void CloseTBAsync(string authenticationToken, object userState) {
            if ((this.CloseTBOperationCompleted == null)) {
                this.CloseTBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseTBOperationCompleted);
            }
            this.InvokeAsync("CloseTB", new object[] {
                        authenticationToken}, this.CloseTBOperationCompleted, userState);
        }
        
        private void OnCloseTBOperationCompleted(object arg) {
            if ((this.CloseTBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseTBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/CreateTB", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateTB(string authenticationToken, System.DateTime applicationDate, bool checkDate, out string easyToken) {
            object[] results = this.Invoke("CreateTB", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate});
            easyToken = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTBAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate) {
            this.CreateTBAsync(authenticationToken, applicationDate, checkDate, null);
        }
        
        /// <remarks/>
        public void CreateTBAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate, object userState) {
            if ((this.CreateTBOperationCompleted == null)) {
                this.CreateTBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTBOperationCompleted);
            }
            this.InvokeAsync("CreateTB", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate}, this.CreateTBOperationCompleted, userState);
        }
        
        private void OnCreateTBOperationCompleted(object arg) {
            if ((this.CreateTBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTBCompleted(this, new CreateTBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/CreateTBEx", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateTBEx(string authenticationToken, System.DateTime applicationDate, bool checkDate, out string easyToken, out string server) {
            object[] results = this.Invoke("CreateTBEx", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate});
            easyToken = ((string)(results[1]));
            server = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTBExAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate) {
            this.CreateTBExAsync(authenticationToken, applicationDate, checkDate, null);
        }
        
        /// <remarks/>
        public void CreateTBExAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate, object userState) {
            if ((this.CreateTBExOperationCompleted == null)) {
                this.CreateTBExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTBExOperationCompleted);
            }
            this.InvokeAsync("CreateTBEx", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate}, this.CreateTBExOperationCompleted, userState);
        }
        
        private void OnCreateTBExOperationCompleted(object arg) {
            if ((this.CreateTBExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTBExCompleted(this, new CreateTBExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/CreateTBTagged", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateTBTagged(string authenticationToken, System.DateTime applicationDate, bool checkDate, string tbloaderTag, out string easyToken, out string server) {
            object[] results = this.Invoke("CreateTBTagged", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate,
                        tbloaderTag});
            easyToken = ((string)(results[1]));
            server = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTBTaggedAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate, string tbloaderTag) {
            this.CreateTBTaggedAsync(authenticationToken, applicationDate, checkDate, tbloaderTag, null);
        }
        
        /// <remarks/>
        public void CreateTBTaggedAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate, string tbloaderTag, object userState) {
            if ((this.CreateTBTaggedOperationCompleted == null)) {
                this.CreateTBTaggedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTBTaggedOperationCompleted);
            }
            this.InvokeAsync("CreateTBTagged", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate,
                        tbloaderTag}, this.CreateTBTaggedOperationCompleted, userState);
        }
        
        private void OnCreateTBTaggedOperationCompleted(object arg) {
            if ((this.CreateTBTaggedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTBTaggedCompleted(this, new CreateTBTaggedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/CreateTBTaggedEx", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateTBTaggedEx(string authenticationToken, System.DateTime applicationDate, bool checkDate, string tbloaderTag, out string easyToken, out string server, out int processId) {
            object[] results = this.Invoke("CreateTBTaggedEx", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate,
                        tbloaderTag});
            easyToken = ((string)(results[1]));
            server = ((string)(results[2]));
            processId = ((int)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTBTaggedExAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate, string tbloaderTag) {
            this.CreateTBTaggedExAsync(authenticationToken, applicationDate, checkDate, tbloaderTag, null);
        }
        
        /// <remarks/>
        public void CreateTBTaggedExAsync(string authenticationToken, System.DateTime applicationDate, bool checkDate, string tbloaderTag, object userState) {
            if ((this.CreateTBTaggedExOperationCompleted == null)) {
                this.CreateTBTaggedExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTBTaggedExOperationCompleted);
            }
            this.InvokeAsync("CreateTBTaggedEx", new object[] {
                        authenticationToken,
                        applicationDate,
                        checkDate,
                        tbloaderTag}, this.CreateTBTaggedExOperationCompleted, userState);
        }
        
        private void OnCreateTBTaggedExOperationCompleted(object arg) {
            if ((this.CreateTBTaggedExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTBTaggedExCompleted(this, new CreateTBTaggedExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetWCFBinding", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WCFBinding GetWCFBinding() {
            object[] results = this.Invoke("GetWCFBinding", new object[0]);
            return ((WCFBinding)(results[0]));
        }
        
        /// <remarks/>
        public void GetWCFBindingAsync() {
            this.GetWCFBindingAsync(null);
        }
        
        /// <remarks/>
        public void GetWCFBindingAsync(object userState) {
            if ((this.GetWCFBindingOperationCompleted == null)) {
                this.GetWCFBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWCFBindingOperationCompleted);
            }
            this.InvokeAsync("GetWCFBinding", new object[0], this.GetWCFBindingOperationCompleted, userState);
        }
        
        private void OnGetWCFBindingOperationCompleted(object arg) {
            if ((this.GetWCFBindingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWCFBindingCompleted(this, new GetWCFBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/ReleaseTB", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReleaseTB(string easyToken) {
            this.Invoke("ReleaseTB", new object[] {
                        easyToken});
        }
        
        /// <remarks/>
        public void ReleaseTBAsync(string easyToken) {
            this.ReleaseTBAsync(easyToken, null);
        }
        
        /// <remarks/>
        public void ReleaseTBAsync(string easyToken, object userState) {
            if ((this.ReleaseTBOperationCompleted == null)) {
                this.ReleaseTBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseTBOperationCompleted);
            }
            this.InvokeAsync("ReleaseTB", new object[] {
                        easyToken}, this.ReleaseTBOperationCompleted, userState);
        }
        
        private void OnReleaseTBOperationCompleted(object arg) {
            if ((this.ReleaseTBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseTBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetTbLoaderInstantiatedListXML", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTbLoaderInstantiatedListXML(string authenticationToken) {
            object[] results = this.Invoke("GetTbLoaderInstantiatedListXML", new object[] {
                        authenticationToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTbLoaderInstantiatedListXMLAsync(string authenticationToken) {
            this.GetTbLoaderInstantiatedListXMLAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void GetTbLoaderInstantiatedListXMLAsync(string authenticationToken, object userState) {
            if ((this.GetTbLoaderInstantiatedListXMLOperationCompleted == null)) {
                this.GetTbLoaderInstantiatedListXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTbLoaderInstantiatedListXMLOperationCompleted);
            }
            this.InvokeAsync("GetTbLoaderInstantiatedListXML", new object[] {
                        authenticationToken}, this.GetTbLoaderInstantiatedListXMLOperationCompleted, userState);
        }
        
        private void OnGetTbLoaderInstantiatedListXMLOperationCompleted(object arg) {
            if ((this.GetTbLoaderInstantiatedListXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTbLoaderInstantiatedListXMLCompleted(this, new GetTbLoaderInstantiatedListXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/IsTbLoaderInstantiated", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsTbLoaderInstantiated(string authenticationToken) {
            object[] results = this.Invoke("IsTbLoaderInstantiated", new object[] {
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsTbLoaderInstantiatedAsync(string authenticationToken) {
            this.IsTbLoaderInstantiatedAsync(authenticationToken, null);
        }
        
        /// <remarks/>
        public void IsTbLoaderInstantiatedAsync(string authenticationToken, object userState) {
            if ((this.IsTbLoaderInstantiatedOperationCompleted == null)) {
                this.IsTbLoaderInstantiatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTbLoaderInstantiatedOperationCompleted);
            }
            this.InvokeAsync("IsTbLoaderInstantiated", new object[] {
                        authenticationToken}, this.IsTbLoaderInstantiatedOperationCompleted, userState);
        }
        
        private void OnIsTbLoaderInstantiatedOperationCompleted(object arg) {
            if ((this.IsTbLoaderInstantiatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsTbLoaderInstantiatedCompleted(this, new IsTbLoaderInstantiatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/KillThread", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void KillThread(int threadID, int processId, string authenticationToken) {
            this.Invoke("KillThread", new object[] {
                        threadID,
                        processId,
                        authenticationToken});
        }
        
        /// <remarks/>
        public void KillThreadAsync(int threadID, int processId, string authenticationToken) {
            this.KillThreadAsync(threadID, processId, authenticationToken, null);
        }
        
        /// <remarks/>
        public void KillThreadAsync(int threadID, int processId, string authenticationToken, object userState) {
            if ((this.KillThreadOperationCompleted == null)) {
                this.KillThreadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKillThreadOperationCompleted);
            }
            this.InvokeAsync("KillThread", new object[] {
                        threadID,
                        processId,
                        authenticationToken}, this.KillThreadOperationCompleted, userState);
        }
        
        private void OnKillThreadOperationCompleted(object arg) {
            if ((this.KillThreadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KillThreadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/StopThread", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool StopThread(int threadID, int processId, string authenticationToken) {
            object[] results = this.Invoke("StopThread", new object[] {
                        threadID,
                        processId,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StopThreadAsync(int threadID, int processId, string authenticationToken) {
            this.StopThreadAsync(threadID, processId, authenticationToken, null);
        }
        
        /// <remarks/>
        public void StopThreadAsync(int threadID, int processId, string authenticationToken, object userState) {
            if ((this.StopThreadOperationCompleted == null)) {
                this.StopThreadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopThreadOperationCompleted);
            }
            this.InvokeAsync("StopThread", new object[] {
                        threadID,
                        processId,
                        authenticationToken}, this.StopThreadOperationCompleted, userState);
        }
        
        private void OnStopThreadOperationCompleted(object arg) {
            if ((this.StopThreadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopThreadCompleted(this, new StopThreadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/KillProcess", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void KillProcess(int processId, string authenticationToken) {
            this.Invoke("KillProcess", new object[] {
                        processId,
                        authenticationToken});
        }
        
        /// <remarks/>
        public void KillProcessAsync(int processId, string authenticationToken) {
            this.KillProcessAsync(processId, authenticationToken, null);
        }
        
        /// <remarks/>
        public void KillProcessAsync(int processId, string authenticationToken, object userState) {
            if ((this.KillProcessOperationCompleted == null)) {
                this.KillProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKillProcessOperationCompleted);
            }
            this.InvokeAsync("KillProcess", new object[] {
                        processId,
                        authenticationToken}, this.KillProcessOperationCompleted, userState);
        }
        
        private void OnKillProcessOperationCompleted(object arg) {
            if ((this.KillProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KillProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/KillTaggedProcesses", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void KillTaggedProcesses(string authenticationToken, string tag) {
            this.Invoke("KillTaggedProcesses", new object[] {
                        authenticationToken,
                        tag});
        }
        
        /// <remarks/>
        public void KillTaggedProcessesAsync(string authenticationToken, string tag) {
            this.KillTaggedProcessesAsync(authenticationToken, tag, null);
        }
        
        /// <remarks/>
        public void KillTaggedProcessesAsync(string authenticationToken, string tag, object userState) {
            if ((this.KillTaggedProcessesOperationCompleted == null)) {
                this.KillTaggedProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKillTaggedProcessesOperationCompleted);
            }
            this.InvokeAsync("KillTaggedProcesses", new object[] {
                        authenticationToken,
                        tag}, this.KillTaggedProcessesOperationCompleted, userState);
        }
        
        private void OnKillTaggedProcessesOperationCompleted(object arg) {
            if ((this.KillTaggedProcessesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KillTaggedProcessesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/StopProcess", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool StopProcess(int processId, string authenticationToken) {
            object[] results = this.Invoke("StopProcess", new object[] {
                        processId,
                        authenticationToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StopProcessAsync(int processId, string authenticationToken) {
            this.StopProcessAsync(processId, authenticationToken, null);
        }
        
        /// <remarks/>
        public void StopProcessAsync(int processId, string authenticationToken, object userState) {
            if ((this.StopProcessOperationCompleted == null)) {
                this.StopProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopProcessOperationCompleted);
            }
            this.InvokeAsync("StopProcess", new object[] {
                        processId,
                        authenticationToken}, this.StopProcessOperationCompleted, userState);
        }
        
        private void OnStopProcessOperationCompleted(object arg) {
            if ((this.StopProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopProcessCompleted(this, new StopProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/SetForceApplicationDate", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForceApplicationDate(bool force) {
            this.Invoke("SetForceApplicationDate", new object[] {
                        force});
        }
        
        /// <remarks/>
        public void SetForceApplicationDateAsync(bool force) {
            this.SetForceApplicationDateAsync(force, null);
        }
        
        /// <remarks/>
        public void SetForceApplicationDateAsync(bool force, object userState) {
            if ((this.SetForceApplicationDateOperationCompleted == null)) {
                this.SetForceApplicationDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForceApplicationDateOperationCompleted);
            }
            this.InvokeAsync("SetForceApplicationDate", new object[] {
                        force}, this.SetForceApplicationDateOperationCompleted, userState);
        }
        
        private void OnSetForceApplicationDateOperationCompleted(object arg) {
            if ((this.SetForceApplicationDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForceApplicationDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/SetData", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetData(string authenticationToken, string data, System.DateTime applicationDate, int postingAction, bool useApproximation, out string result) {
            object[] results = this.Invoke("SetData", new object[] {
                        authenticationToken,
                        data,
                        applicationDate,
                        postingAction,
                        useApproximation});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataAsync(string authenticationToken, string data, System.DateTime applicationDate, int postingAction, bool useApproximation) {
            this.SetDataAsync(authenticationToken, data, applicationDate, postingAction, useApproximation, null);
        }
        
        /// <remarks/>
        public void SetDataAsync(string authenticationToken, string data, System.DateTime applicationDate, int postingAction, bool useApproximation, object userState) {
            if ((this.SetDataOperationCompleted == null)) {
                this.SetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataOperationCompleted);
            }
            this.InvokeAsync("SetData", new object[] {
                        authenticationToken,
                        data,
                        applicationDate,
                        postingAction,
                        useApproximation}, this.SetDataOperationCompleted, userState);
        }
        
        private void OnSetDataOperationCompleted(object arg) {
            if ((this.SetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataCompleted(this, new SetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/SetDataTagged", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDataTagged(string authenticationToken, string data, System.DateTime applicationDate, int postingAction, bool useApproximation, string tbloaderTag, out string result) {
            object[] results = this.Invoke("SetDataTagged", new object[] {
                        authenticationToken,
                        data,
                        applicationDate,
                        postingAction,
                        useApproximation,
                        tbloaderTag});
            result = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataTaggedAsync(string authenticationToken, string data, System.DateTime applicationDate, int postingAction, bool useApproximation, string tbloaderTag) {
            this.SetDataTaggedAsync(authenticationToken, data, applicationDate, postingAction, useApproximation, tbloaderTag, null);
        }
        
        /// <remarks/>
        public void SetDataTaggedAsync(string authenticationToken, string data, System.DateTime applicationDate, int postingAction, bool useApproximation, string tbloaderTag, object userState) {
            if ((this.SetDataTaggedOperationCompleted == null)) {
                this.SetDataTaggedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataTaggedOperationCompleted);
            }
            this.InvokeAsync("SetDataTagged", new object[] {
                        authenticationToken,
                        data,
                        applicationDate,
                        postingAction,
                        useApproximation,
                        tbloaderTag}, this.SetDataTaggedOperationCompleted, userState);
        }
        
        private void OnSetDataTaggedOperationCompleted(object arg) {
            if ((this.SetDataTaggedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataTaggedCompleted(this, new SetDataTaggedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetData", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetData(string authenticationToken, string parameters, System.DateTime applicationDate, int loadAction, int resultType, int formatType, bool useApproximation) {
            object[] results = this.Invoke("GetData", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        loadAction,
                        resultType,
                        formatType,
                        useApproximation});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(string authenticationToken, string parameters, System.DateTime applicationDate, int loadAction, int resultType, int formatType, bool useApproximation) {
            this.GetDataAsync(authenticationToken, parameters, applicationDate, loadAction, resultType, formatType, useApproximation, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(string authenticationToken, string parameters, System.DateTime applicationDate, int loadAction, int resultType, int formatType, bool useApproximation, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        loadAction,
                        resultType,
                        formatType,
                        useApproximation}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetDataTagged", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDataTagged(string authenticationToken, string parameters, System.DateTime applicationDate, int loadAction, int resultType, int formatType, bool useApproximation, string tbloaderTag) {
            object[] results = this.Invoke("GetDataTagged", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        loadAction,
                        resultType,
                        formatType,
                        useApproximation,
                        tbloaderTag});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataTaggedAsync(string authenticationToken, string parameters, System.DateTime applicationDate, int loadAction, int resultType, int formatType, bool useApproximation, string tbloaderTag) {
            this.GetDataTaggedAsync(authenticationToken, parameters, applicationDate, loadAction, resultType, formatType, useApproximation, tbloaderTag, null);
        }
        
        /// <remarks/>
        public void GetDataTaggedAsync(string authenticationToken, string parameters, System.DateTime applicationDate, int loadAction, int resultType, int formatType, bool useApproximation, string tbloaderTag, object userState) {
            if ((this.GetDataTaggedOperationCompleted == null)) {
                this.GetDataTaggedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataTaggedOperationCompleted);
            }
            this.InvokeAsync("GetDataTagged", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        loadAction,
                        resultType,
                        formatType,
                        useApproximation,
                        tbloaderTag}, this.GetDataTaggedOperationCompleted, userState);
        }
        
        private void OnGetDataTaggedOperationCompleted(object arg) {
            if ((this.GetDataTaggedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataTaggedCompleted(this, new GetDataTaggedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/ExistData", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExistData(string authenticationToken, string parameters) {
            object[] results = this.Invoke("ExistData", new object[] {
                        authenticationToken,
                        parameters});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExistDataAsync(string authenticationToken, string parameters) {
            this.ExistDataAsync(authenticationToken, parameters, null);
        }
        
        /// <remarks/>
        public void ExistDataAsync(string authenticationToken, string parameters, object userState) {
            if ((this.ExistDataOperationCompleted == null)) {
                this.ExistDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExistDataOperationCompleted);
            }
            this.InvokeAsync("ExistData", new object[] {
                        authenticationToken,
                        parameters}, this.ExistDataOperationCompleted, userState);
        }
        
        private void OnExistDataOperationCompleted(object arg) {
            if ((this.ExistDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExistDataCompleted(this, new ExistDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/XmlGetParameters", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string XmlGetParameters(string authenticationToken, string parameters, System.DateTime applicationDate, bool useApproximation) {
            object[] results = this.Invoke("XmlGetParameters", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        useApproximation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void XmlGetParametersAsync(string authenticationToken, string parameters, System.DateTime applicationDate, bool useApproximation) {
            this.XmlGetParametersAsync(authenticationToken, parameters, applicationDate, useApproximation, null);
        }
        
        /// <remarks/>
        public void XmlGetParametersAsync(string authenticationToken, string parameters, System.DateTime applicationDate, bool useApproximation, object userState) {
            if ((this.XmlGetParametersOperationCompleted == null)) {
                this.XmlGetParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXmlGetParametersOperationCompleted);
            }
            this.InvokeAsync("XmlGetParameters", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        useApproximation}, this.XmlGetParametersOperationCompleted, userState);
        }
        
        private void OnXmlGetParametersOperationCompleted(object arg) {
            if ((this.XmlGetParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XmlGetParametersCompleted(this, new XmlGetParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/XmlGetParametersTagged", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string XmlGetParametersTagged(string authenticationToken, string parameters, System.DateTime applicationDate, bool useApproximation, string tbloaderTag) {
            object[] results = this.Invoke("XmlGetParametersTagged", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        useApproximation,
                        tbloaderTag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void XmlGetParametersTaggedAsync(string authenticationToken, string parameters, System.DateTime applicationDate, bool useApproximation, string tbloaderTag) {
            this.XmlGetParametersTaggedAsync(authenticationToken, parameters, applicationDate, useApproximation, tbloaderTag, null);
        }
        
        /// <remarks/>
        public void XmlGetParametersTaggedAsync(string authenticationToken, string parameters, System.DateTime applicationDate, bool useApproximation, string tbloaderTag, object userState) {
            if ((this.XmlGetParametersTaggedOperationCompleted == null)) {
                this.XmlGetParametersTaggedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXmlGetParametersTaggedOperationCompleted);
            }
            this.InvokeAsync("XmlGetParametersTagged", new object[] {
                        authenticationToken,
                        parameters,
                        applicationDate,
                        useApproximation,
                        tbloaderTag}, this.XmlGetParametersTaggedOperationCompleted, userState);
        }
        
        private void OnXmlGetParametersTaggedOperationCompleted(object arg) {
            if ((this.XmlGetParametersTaggedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XmlGetParametersTaggedCompleted(this, new XmlGetParametersTaggedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetXMLHotLink", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXMLHotLink(string authenticationToken, string docNamespace, string nsUri, string fieldXPath) {
            object[] results = this.Invoke("GetXMLHotLink", new object[] {
                        authenticationToken,
                        docNamespace,
                        nsUri,
                        fieldXPath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXMLHotLinkAsync(string authenticationToken, string docNamespace, string nsUri, string fieldXPath) {
            this.GetXMLHotLinkAsync(authenticationToken, docNamespace, nsUri, fieldXPath, null);
        }
        
        /// <remarks/>
        public void GetXMLHotLinkAsync(string authenticationToken, string docNamespace, string nsUri, string fieldXPath, object userState) {
            if ((this.GetXMLHotLinkOperationCompleted == null)) {
                this.GetXMLHotLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXMLHotLinkOperationCompleted);
            }
            this.InvokeAsync("GetXMLHotLink", new object[] {
                        authenticationToken,
                        docNamespace,
                        nsUri,
                        fieldXPath}, this.GetXMLHotLinkOperationCompleted, userState);
        }
        
        private void OnGetXMLHotLinkOperationCompleted(object arg) {
            if ((this.GetXMLHotLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXMLHotLinkCompleted(this, new GetXMLHotLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetDocumentSchema", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentSchema(string authenticationToken, string documentNamespace, string profileName, string forUser) {
            object[] results = this.Invoke("GetDocumentSchema", new object[] {
                        authenticationToken,
                        documentNamespace,
                        profileName,
                        forUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentSchemaAsync(string authenticationToken, string documentNamespace, string profileName, string forUser) {
            this.GetDocumentSchemaAsync(authenticationToken, documentNamespace, profileName, forUser, null);
        }
        
        /// <remarks/>
        public void GetDocumentSchemaAsync(string authenticationToken, string documentNamespace, string profileName, string forUser, object userState) {
            if ((this.GetDocumentSchemaOperationCompleted == null)) {
                this.GetDocumentSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentSchemaOperationCompleted);
            }
            this.InvokeAsync("GetDocumentSchema", new object[] {
                        authenticationToken,
                        documentNamespace,
                        profileName,
                        forUser}, this.GetDocumentSchemaOperationCompleted, userState);
        }
        
        private void OnGetDocumentSchemaOperationCompleted(object arg) {
            if ((this.GetDocumentSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentSchemaCompleted(this, new GetDocumentSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetReportSchema", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReportSchema(string authenticationToken, string reportNamespace, string forUser) {
            object[] results = this.Invoke("GetReportSchema", new object[] {
                        authenticationToken,
                        reportNamespace,
                        forUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportSchemaAsync(string authenticationToken, string reportNamespace, string forUser) {
            this.GetReportSchemaAsync(authenticationToken, reportNamespace, forUser, null);
        }
        
        /// <remarks/>
        public void GetReportSchemaAsync(string authenticationToken, string reportNamespace, string forUser, object userState) {
            if ((this.GetReportSchemaOperationCompleted == null)) {
                this.GetReportSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportSchemaOperationCompleted);
            }
            this.InvokeAsync("GetReportSchema", new object[] {
                        authenticationToken,
                        reportNamespace,
                        forUser}, this.GetReportSchemaOperationCompleted, userState);
        }
        
        private void OnGetReportSchemaOperationCompleted(object arg) {
            if ((this.GetReportSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportSchemaCompleted(this, new GetReportSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetXMLEnum", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXMLEnum(string authenticationToken, int enumID, string userLanguage) {
            object[] results = this.Invoke("GetXMLEnum", new object[] {
                        authenticationToken,
                        enumID,
                        userLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXMLEnumAsync(string authenticationToken, int enumID, string userLanguage) {
            this.GetXMLEnumAsync(authenticationToken, enumID, userLanguage, null);
        }
        
        /// <remarks/>
        public void GetXMLEnumAsync(string authenticationToken, int enumID, string userLanguage, object userState) {
            if ((this.GetXMLEnumOperationCompleted == null)) {
                this.GetXMLEnumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXMLEnumOperationCompleted);
            }
            this.InvokeAsync("GetXMLEnum", new object[] {
                        authenticationToken,
                        enumID,
                        userLanguage}, this.GetXMLEnumOperationCompleted, userState);
        }
        
        private void OnGetXMLEnumOperationCompleted(object arg) {
            if ((this.GetXMLEnumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXMLEnumCompleted(this, new GetXMLEnumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetEnumsXml", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEnumsXml(string userLanguage) {
            object[] results = this.Invoke("GetEnumsXml", new object[] {
                        userLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnumsXmlAsync(string userLanguage) {
            this.GetEnumsXmlAsync(userLanguage, null);
        }
        
        /// <remarks/>
        public void GetEnumsXmlAsync(string userLanguage, object userState) {
            if ((this.GetEnumsXmlOperationCompleted == null)) {
                this.GetEnumsXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnumsXmlOperationCompleted);
            }
            this.InvokeAsync("GetEnumsXml", new object[] {
                        userLanguage}, this.GetEnumsXmlOperationCompleted, userState);
        }
        
        private void OnGetEnumsXmlOperationCompleted(object arg) {
            if ((this.GetEnumsXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnumsXmlCompleted(this, new GetEnumsXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetXMLHotLinkDef", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXMLHotLinkDef(string authenticationToken, string docNameSpace, string nsUri, string fieldXPath, string companyName) {
            object[] results = this.Invoke("GetXMLHotLinkDef", new object[] {
                        authenticationToken,
                        docNameSpace,
                        nsUri,
                        fieldXPath,
                        companyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXMLHotLinkDefAsync(string authenticationToken, string docNameSpace, string nsUri, string fieldXPath, string companyName) {
            this.GetXMLHotLinkDefAsync(authenticationToken, docNameSpace, nsUri, fieldXPath, companyName, null);
        }
        
        /// <remarks/>
        public void GetXMLHotLinkDefAsync(string authenticationToken, string docNameSpace, string nsUri, string fieldXPath, string companyName, object userState) {
            if ((this.GetXMLHotLinkDefOperationCompleted == null)) {
                this.GetXMLHotLinkDefOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXMLHotLinkDefOperationCompleted);
            }
            this.InvokeAsync("GetXMLHotLinkDef", new object[] {
                        authenticationToken,
                        docNameSpace,
                        nsUri,
                        fieldXPath,
                        companyName}, this.GetXMLHotLinkDefOperationCompleted, userState);
        }
        
        private void OnGetXMLHotLinkDefOperationCompleted(object arg) {
            if ((this.GetXMLHotLinkDefCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXMLHotLinkDefCompleted(this, new GetXMLHotLinkDefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/RunFunction", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunFunction(string authenticationToken, string request, string nameSpace, string functionName, out string errorMsg) {
            object[] results = this.Invoke("RunFunction", new object[] {
                        authenticationToken,
                        request,
                        nameSpace,
                        functionName});
            errorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunFunctionAsync(string authenticationToken, string request, string nameSpace, string functionName) {
            this.RunFunctionAsync(authenticationToken, request, nameSpace, functionName, null);
        }
        
        /// <remarks/>
        public void RunFunctionAsync(string authenticationToken, string request, string nameSpace, string functionName, object userState) {
            if ((this.RunFunctionOperationCompleted == null)) {
                this.RunFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunFunctionOperationCompleted);
            }
            this.InvokeAsync("RunFunction", new object[] {
                        authenticationToken,
                        request,
                        nameSpace,
                        functionName}, this.RunFunctionOperationCompleted, userState);
        }
        
        private void OnRunFunctionOperationCompleted(object arg) {
            if ((this.RunFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunFunctionCompleted(this, new RunFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetCachedFile", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCachedFile(string authenticationToken, string nameSpace, string user, string company) {
            object[] results = this.Invoke("GetCachedFile", new object[] {
                        authenticationToken,
                        nameSpace,
                        user,
                        company});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCachedFileAsync(string authenticationToken, string nameSpace, string user, string company) {
            this.GetCachedFileAsync(authenticationToken, nameSpace, user, company, null);
        }
        
        /// <remarks/>
        public void GetCachedFileAsync(string authenticationToken, string nameSpace, string user, string company, object userState) {
            if ((this.GetCachedFileOperationCompleted == null)) {
                this.GetCachedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCachedFileOperationCompleted);
            }
            this.InvokeAsync("GetCachedFile", new object[] {
                        authenticationToken,
                        nameSpace,
                        user,
                        company}, this.GetCachedFileOperationCompleted, userState);
        }
        
        private void OnGetCachedFileOperationCompleted(object arg) {
            if ((this.GetCachedFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCachedFileCompleted(this, new GetCachedFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetFilePathFromNamespace", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFilePathFromNamespace(string authenticationToken, string nameSpace, string user, string company) {
            object[] results = this.Invoke("GetFilePathFromNamespace", new object[] {
                        authenticationToken,
                        nameSpace,
                        user,
                        company});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFilePathFromNamespaceAsync(string authenticationToken, string nameSpace, string user, string company) {
            this.GetFilePathFromNamespaceAsync(authenticationToken, nameSpace, user, company, null);
        }
        
        /// <remarks/>
        public void GetFilePathFromNamespaceAsync(string authenticationToken, string nameSpace, string user, string company, object userState) {
            if ((this.GetFilePathFromNamespaceOperationCompleted == null)) {
                this.GetFilePathFromNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilePathFromNamespaceOperationCompleted);
            }
            this.InvokeAsync("GetFilePathFromNamespace", new object[] {
                        authenticationToken,
                        nameSpace,
                        user,
                        company}, this.GetFilePathFromNamespaceOperationCompleted, userState);
        }
        
        private void OnGetFilePathFromNamespaceOperationCompleted(object arg) {
            if ((this.GetFilePathFromNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilePathFromNamespaceCompleted(this, new GetFilePathFromNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetFileStream", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileStream(string authenticationToken, string nameSpace, string user, string company) {
            object[] results = this.Invoke("GetFileStream", new object[] {
                        authenticationToken,
                        nameSpace,
                        user,
                        company});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileStreamAsync(string authenticationToken, string nameSpace, string user, string company) {
            this.GetFileStreamAsync(authenticationToken, nameSpace, user, company, null);
        }
        
        /// <remarks/>
        public void GetFileStreamAsync(string authenticationToken, string nameSpace, string user, string company, object userState) {
            if ((this.GetFileStreamOperationCompleted == null)) {
                this.GetFileStreamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileStreamOperationCompleted);
            }
            this.InvokeAsync("GetFileStream", new object[] {
                        authenticationToken,
                        nameSpace,
                        user,
                        company}, this.GetFileStreamOperationCompleted, userState);
        }
        
        private void OnGetFileStreamOperationCompleted(object arg) {
            if ((this.GetFileStreamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileStreamCompleted(this, new GetFileStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetFileStreamByFileName", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileStreamByFileName(string authenticationToken, string fileName) {
            object[] results = this.Invoke("GetFileStreamByFileName", new object[] {
                        authenticationToken,
                        fileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileStreamByFileNameAsync(string authenticationToken, string fileName) {
            this.GetFileStreamByFileNameAsync(authenticationToken, fileName, null);
        }
        
        /// <remarks/>
        public void GetFileStreamByFileNameAsync(string authenticationToken, string fileName, object userState) {
            if ((this.GetFileStreamByFileNameOperationCompleted == null)) {
                this.GetFileStreamByFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileStreamByFileNameOperationCompleted);
            }
            this.InvokeAsync("GetFileStreamByFileName", new object[] {
                        authenticationToken,
                        fileName}, this.GetFileStreamByFileNameOperationCompleted, userState);
        }
        
        private void OnGetFileStreamByFileNameOperationCompleted(object arg) {
            if ((this.GetFileStreamByFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileStreamByFileNameCompleted(this, new GetFileStreamByFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/IsAlive", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[0], this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetDiagnosticItems", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public DiagnosticSimpleItem[] GetDiagnosticItems(string authenticationToken, bool clear) {
            object[] results = this.Invoke("GetDiagnosticItems", new object[] {
                        authenticationToken,
                        clear});
            return ((DiagnosticSimpleItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiagnosticItemsAsync(string authenticationToken, bool clear) {
            this.GetDiagnosticItemsAsync(authenticationToken, clear, null);
        }
        
        /// <remarks/>
        public void GetDiagnosticItemsAsync(string authenticationToken, bool clear, object userState) {
            if ((this.GetDiagnosticItemsOperationCompleted == null)) {
                this.GetDiagnosticItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiagnosticItemsOperationCompleted);
            }
            this.InvokeAsync("GetDiagnosticItems", new object[] {
                        authenticationToken,
                        clear}, this.GetDiagnosticItemsOperationCompleted, userState);
        }
        
        private void OnGetDiagnosticItemsOperationCompleted(object arg) {
            if ((this.GetDiagnosticItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiagnosticItemsCompleted(this, new GetDiagnosticItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetServerPrinterNames", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetServerPrinterNames(out string[] printers) {
            object[] results = this.Invoke("GetServerPrinterNames", new object[0]);
            printers = ((string[])(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerPrinterNamesAsync() {
            this.GetServerPrinterNamesAsync(null);
        }
        
        /// <remarks/>
        public void GetServerPrinterNamesAsync(object userState) {
            if ((this.GetServerPrinterNamesOperationCompleted == null)) {
                this.GetServerPrinterNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerPrinterNamesOperationCompleted);
            }
            this.InvokeAsync("GetServerPrinterNames", new object[0], this.GetServerPrinterNamesOperationCompleted, userState);
        }
        
        private void OnGetServerPrinterNamesOperationCompleted(object arg) {
            if ((this.GetServerPrinterNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerPrinterNamesCompleted(this, new GetServerPrinterNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/GetInstalledCultures", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetInstalledCultures() {
            object[] results = this.Invoke("GetInstalledCultures", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInstalledCulturesAsync() {
            this.GetInstalledCulturesAsync(null);
        }
        
        /// <remarks/>
        public void GetInstalledCulturesAsync(object userState) {
            if ((this.GetInstalledCulturesOperationCompleted == null)) {
                this.GetInstalledCulturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstalledCulturesOperationCompleted);
            }
            this.InvokeAsync("GetInstalledCultures", new object[0], this.GetInstalledCulturesOperationCompleted, userState);
        }
        
        private void OnGetInstalledCulturesOperationCompleted(object arg) {
            if ((this.GetInstalledCulturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstalledCulturesCompleted(this, new GetInstalledCulturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/ResolvePath", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResolvePath(string image) {
            object[] results = this.Invoke("ResolvePath", new object[] {
                        image});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResolvePathAsync(string image) {
            this.ResolvePathAsync(image, null);
        }
        
        /// <remarks/>
        public void ResolvePathAsync(string image, object userState) {
            if ((this.ResolvePathOperationCompleted == null)) {
                this.ResolvePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResolvePathOperationCompleted);
            }
            this.InvokeAsync("ResolvePath", new object[] {
                        image}, this.ResolvePathOperationCompleted, userState);
        }
        
        private void OnResolvePathOperationCompleted(object arg) {
            if ((this.ResolvePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResolvePathCompleted(this, new ResolvePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microarea.it/TbServices/ResolvePathIMS", RequestNamespace="http://microarea.it/TbServices/", ResponseNamespace="http://microarea.it/TbServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResolvePathIMS(string company, string image) {
            object[] results = this.Invoke("ResolvePathIMS", new object[] {
                        company,
                        image});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResolvePathIMSAsync(string company, string image) {
            this.ResolvePathIMSAsync(company, image, null);
        }
        
        /// <remarks/>
        public void ResolvePathIMSAsync(string company, string image, object userState) {
            if ((this.ResolvePathIMSOperationCompleted == null)) {
                this.ResolvePathIMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResolvePathIMSOperationCompleted);
            }
            this.InvokeAsync("ResolvePathIMS", new object[] {
                        company,
                        image}, this.ResolvePathIMSOperationCompleted, userState);
        }
        
        private void OnResolvePathIMSOperationCompleted(object arg) {
            if ((this.ResolvePathIMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResolvePathIMSCompleted(this, new ResolvePathIMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/TbServices/")]
    public enum WCFBinding {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        BasicHttp,
        
        /// <remarks/>
        NetTcp,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/TbServices/")]
    public partial class DiagnosticSimpleItem {
        
        private DiagnosticType typeField;
        
        private string messageField;
        
        /// <remarks/>
        public DiagnosticType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/TbServices/")]
    public enum DiagnosticType {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Warning = 2,
        
        /// <remarks/>
        Error = 4,
        
        /// <remarks/>
        LogInfo = 8,
        
        /// <remarks/>
        Information = 16,
        
        /// <remarks/>
        FatalError = 32,
        
        /// <remarks/>
        Banner = 64,
        
        /// <remarks/>
        LogOnFile = 128,
        
        /// <remarks/>
        All = 256,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CloseTBCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CreateTBCompletedEventHandler(object sender, CreateTBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string easyToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CreateTBExCompletedEventHandler(object sender, CreateTBExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTBExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTBExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string easyToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string server {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CreateTBTaggedCompletedEventHandler(object sender, CreateTBTaggedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTBTaggedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTBTaggedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string easyToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string server {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CreateTBTaggedExCompletedEventHandler(object sender, CreateTBTaggedExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTBTaggedExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTBTaggedExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string easyToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string server {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int processId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetWCFBindingCompletedEventHandler(object sender, GetWCFBindingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWCFBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWCFBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WCFBinding Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCFBinding)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ReleaseTBCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetTbLoaderInstantiatedListXMLCompletedEventHandler(object sender, GetTbLoaderInstantiatedListXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTbLoaderInstantiatedListXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTbLoaderInstantiatedListXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsTbLoaderInstantiatedCompletedEventHandler(object sender, IsTbLoaderInstantiatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsTbLoaderInstantiatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsTbLoaderInstantiatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void KillThreadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void StopThreadCompletedEventHandler(object sender, StopThreadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopThreadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopThreadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void KillProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void KillTaggedProcessesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void StopProcessCompletedEventHandler(object sender, StopProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetForceApplicationDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetDataCompletedEventHandler(object sender, SetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetDataTaggedCompletedEventHandler(object sender, SetDataTaggedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataTaggedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataTaggedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDataTaggedCompletedEventHandler(object sender, GetDataTaggedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataTaggedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataTaggedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ExistDataCompletedEventHandler(object sender, ExistDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExistDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExistDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void XmlGetParametersCompletedEventHandler(object sender, XmlGetParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XmlGetParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XmlGetParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void XmlGetParametersTaggedCompletedEventHandler(object sender, XmlGetParametersTaggedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XmlGetParametersTaggedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XmlGetParametersTaggedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetXMLHotLinkCompletedEventHandler(object sender, GetXMLHotLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXMLHotLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXMLHotLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDocumentSchemaCompletedEventHandler(object sender, GetDocumentSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetReportSchemaCompletedEventHandler(object sender, GetReportSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetXMLEnumCompletedEventHandler(object sender, GetXMLEnumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXMLEnumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXMLEnumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetEnumsXmlCompletedEventHandler(object sender, GetEnumsXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnumsXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnumsXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetXMLHotLinkDefCompletedEventHandler(object sender, GetXMLHotLinkDefCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXMLHotLinkDefCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXMLHotLinkDefCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void RunFunctionCompletedEventHandler(object sender, RunFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetCachedFileCompletedEventHandler(object sender, GetCachedFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCachedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCachedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetFilePathFromNamespaceCompletedEventHandler(object sender, GetFilePathFromNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilePathFromNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilePathFromNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetFileStreamCompletedEventHandler(object sender, GetFileStreamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetFileStreamByFileNameCompletedEventHandler(object sender, GetFileStreamByFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileStreamByFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileStreamByFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDiagnosticItemsCompletedEventHandler(object sender, GetDiagnosticItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiagnosticItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiagnosticItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DiagnosticSimpleItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DiagnosticSimpleItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetServerPrinterNamesCompletedEventHandler(object sender, GetServerPrinterNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerPrinterNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerPrinterNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] printers {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetInstalledCulturesCompletedEventHandler(object sender, GetInstalledCulturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstalledCulturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstalledCulturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ResolvePathCompletedEventHandler(object sender, ResolvePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResolvePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResolvePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ResolvePathIMSCompletedEventHandler(object sender, ResolvePathIMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResolvePathIMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResolvePathIMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591